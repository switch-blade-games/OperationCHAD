<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>pepe_place_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sText[skin_spr.leg_idle]       = "leg_idle";
sText[skin_spr.leg_idle_r]     = "leg_idle_r";
sText[skin_spr.leg_idle_l]     = "leg_idle_l";
sText[skin_spr.leg_duck_r]     = "leg_duck_r";
sText[skin_spr.leg_duck_l]     = "leg_duck_l";
sText[skin_spr.leg_walk]       = "leg_walk";
sText[skin_spr.leg_drop]       = "leg_drop";
sText[skin_spr.leg_hang]       = "leg_hang";
sText[skin_spr.leg_climb]      = "leg_climb";
sText[skin_spr.leg_moto]       = "leg_moto";
sText[skin_spr.arm_0]          = "arm_0";
sText[skin_spr.arm_45]         = "arm_45";
sText[skin_spr.arm_90]         = "arm_90";
sText[skin_spr.arm_135]        = "arm_135";
sText[skin_spr.arm_180]        = "arm_180";
sText[skin_spr.arm_225]        = "arm_225";
sText[skin_spr.arm_270]        = "arm_270";
sText[skin_spr.arm_315]        = "arm_315";
sText[skin_spr.arm_single_0]   = "arm_single_0";
sText[skin_spr.arm_single_45]  = "arm_single_45";
sText[skin_spr.arm_single_90]  = "arm_single_90";
sText[skin_spr.arm_single_135] = "arm_single_135";
sText[skin_spr.arm_single_180] = "arm_single_180";
sText[skin_spr.arm_single_225] = "arm_single_225";
sText[skin_spr.arm_single_270] = "arm_single_270";
sText[skin_spr.arm_single_315] = "arm_single_315";
sText[skin_spr.arm_climb_0]    = "arm_climb_0";
sText[skin_spr.arm_climb_45]   = "arm_climb_45";
sText[skin_spr.arm_climb_90]   = "arm_climb_90";
sText[skin_spr.arm_climb_135]  = "arm_climb_135";
sText[skin_spr.arm_climb_180]  = "arm_climb_180";
sText[skin_spr.arm_climb_225]  = "arm_climb_225";
sText[skin_spr.arm_climb_270]  = "arm_climb_270";
sText[skin_spr.arm_climb_315]  = "arm_climb_315";
sText[skin_spr.full_roll]      = "full_roll";
sText[skin_spr.full_duck]      = "full_duck";
sText[skin_spr.full_hang]      = "full_hang";
sText[skin_spr.full_climb]     = "full_climb";
sText[skin_spr.full_moto]      = "full_moto";
sText[skin_spr.full_dead_idle] = "full_dead_idle";
sText[skin_spr.full_dead_roll] = "full_dead_roll";
sText[skin_spr.full_dead_down] = "full_dead_down";
sText[skin_spr.extra_arm_moto] = "extra_arm_moto";
sText[skin_spr.extra_moto]     = "extra_moto";

mText[mState.idle]  = "idle";
mText[mState.walk]  = "walk";
mText[mState.lock]  = "lock";
mText[mState.duck]  = "duck";
mText[mState.hang]  = "hang";
mText[mState.climb] = "climb";
mText[mState.moto]  = "moto";
mText[mState.dead]  = "dead";

aText[aState.idle]       = "idle";
aText[aState.walk]       = "walk";
aText[aState.drop]       = "drop";
aText[aState.roll]       = "roll";
aText[aState.duck]       = "duck";
aText[aState.hang]       = "hang";
aText[aState.hang_move]  = "hang_move";
aText[aState.climb]      = "climb";
aText[aState.climb_move] = "climb_move";
aText[aState.moto]       = "moto";
aText[aState.moto_fire]  = "moto_fire";
aText[aState.dead]       = "dead";

dText[doll.full] = "Full";
dText[doll.arms] = "Arms";
dText[doll.legs] = "Legs";
dText[doll.back] = "Back";
dText[doll.moto] = "Moto";

edit_type = -1;
edit_index = 0;
edit_state = 0;
state_count = 0;
state_index = 0;

mx = 0;
my = 0;
click = false;
click_x = 0;
click_y = 0;

panel_x = 0;
panel_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx = device_mouse_x_to_gui(0);
my = device_mouse_y_to_gui(0);

var edit_input = false;
var edit_save = false;

if (instance_exists(obj_player))
    {
    if (mouse_check_button_pressed(mb_right))
    or (keyboard_check_pressed(vk_alt))
        obj_player.debug_freeze = !obj_player.debug_freeze;
    
    if (mouse_check_button_pressed(mb_left))
        edit_input = true;
    if (keyboard_check_pressed(vk_left)
    or  keyboard_check_pressed(vk_right)
    or  keyboard_check_pressed(vk_up)
    or  keyboard_check_pressed(vk_down)) and (obj_player.debug_freeze)
        edit_input = true;
    
    if (mouse_check_button_released(mb_left))
        edit_save = true;
    if (keyboard_check_released(vk_left)
    or  keyboard_check_released(vk_right)
    or  keyboard_check_released(vk_up)
    or  keyboard_check_released(vk_down)) and (obj_player.debug_freeze)
        edit_save = true;
    
    // grab player variables
    if (edit_type &gt; -1) and (obj_player.draw[edit_type] &gt; -1)
        {
        edit_index = obj_player.spr_index[edit_type];
        edit_state = obj_player.anim_state;
        state_count = obj_player.sprite_offset_states[edit_index];
        reset = false;
        }
    else
        reset = true;
    
    if (reset)
        {
        edit_index = 0;
        edit_state = 0;
        state_count = 0;
        state_index = 0;
        
        click = false;
        click_x = 0;
        click_y = 0;
        obj_player.debug_freeze = false;
        exit;
        }
    
    if (edit_input)
        {
        if (mouse_check_button_pressed(mb_left)) and (!click)
        and (!point_in_rectangle(mx,my,0,0,panel_x,panel_y))
            {
            // record mouse position
            click = true;
            click_x = mx;
            click_y = my;
            }
        
        exists = false;
        state_index = state_count;
        for(var i=0; i&lt;state_count; i++;)
            {
            // edit existing offset
            var temp_state = obj_player.sprite_offset_state[edit_index,i];
            if (temp_state == edit_state)
                {
                exists = true;
                state_index = i;
                break;
                }
            }
        if (!exists)
            {
            // create new offset to edit
            obj_player.sprite_offset_state[edit_index,state_index] = edit_state;
            obj_player.sprite_offset_x[edit_index,state_index] = 0;
            obj_player.sprite_offset_y[edit_index,state_index] = 0;
            obj_player.sprite_offset_states[edit_index]++;
            }
        }
    
    if (edit_input) or ((mouse_check_button(mb_left)) and (click))
        {
        if (mouse_check_button(mb_left)) and (click)
            {
            obj_player.sprite_offset_x[edit_index,state_index] += (mx-click_x)*obj_player.spr_dir[edit_type];
            obj_player.sprite_offset_y[edit_index,state_index] += (my-click_y);
            click_x = mx;
            click_y = my;
            }
        if (keyboard_check_pressed(vk_left))
            obj_player.sprite_offset_x[edit_index,state_index] -= obj_player.spr_dir[edit_type];
        if (keyboard_check_pressed(vk_right))
            obj_player.sprite_offset_x[edit_index,state_index] += obj_player.spr_dir[edit_type];
        if (keyboard_check_pressed(vk_up))
            obj_player.sprite_offset_y[edit_index,state_index]--;
        if (keyboard_check_pressed(vk_down))
            obj_player.sprite_offset_y[edit_index,state_index]++;
        
        obj_player.spr_ox[edit_type] = obj_player.sprite_offset_x[edit_index,state_index];
        obj_player.spr_oy[edit_type] = obj_player.sprite_offset_y[edit_index,state_index];
        }
    
    if (edit_save)
        event_user(0);
    
    if (!mouse_check_button(mb_left))
        click = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// load();

var file = obj_player.offset_path;
if (file_exists(file))
    {
    // clear
    for(var i=0; i&lt;skin_spr.size; i++;)
        {
        obj_player.sprite_offset_states[i] = 0;
        obj_player.sprite_offset_state[i,0] = 0;
        obj_player.sprite_offset_x[i,0] = 0;
        obj_player.sprite_offset_y[i,0] = 0;
        }
    
    // load
    var buff = buffer_load(file);
    buffer_seek(buff,buffer_seek_start,0);
    
    for(var i=0; i&lt;skin_spr.size; i++;)
        {
        var num = buffer_read(buff,buffer_u16);
        for(var j=0; j&lt;num; j++;)
            {
            var state = buffer_read(buff,buffer_u8);
            var offx  = buffer_read(buff,buffer_s8);
            var offy  = buffer_read(buff,buffer_s8);
            
            if (state &lt; aState.size)
                {
                obj_player.sprite_offset_state[i,j] = state;
                obj_player.sprite_offset_x[i,j] = offx;
                obj_player.sprite_offset_y[i,j] = offy;
                obj_player.sprite_offset_states[i]++;
                }
            }
        }
    
    buffer_delete(buff);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// save();

var file = obj_player.offset_path;
if (file != "")
    {
    // save
    var buff = buffer_create(1024,buffer_grow,1);
    buffer_seek(buff,buffer_seek_start,0);
    
    for(var i=0; i&lt;skin_spr.size; i++;)
        {
        buffer_write(buff,buffer_u16,obj_player.sprite_offset_states[i]);
        for(var j=0; j&lt;obj_player.sprite_offset_states[i]; j++;)
            {
            buffer_write(buff,buffer_u8,obj_player.sprite_offset_state[i,j]);
            buffer_write(buff,buffer_s8,obj_player.sprite_offset_x[i,j]);
            buffer_write(buff,buffer_s8,obj_player.sprite_offset_y[i,j]);
            }
        }
    
    var bytes = buffer_tell(buff);
    buffer_save_ext(buff,file,0,bytes);
    buffer_delete(buff);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ux = device_mouse_x_to_gui(0);
var uy = device_mouse_y_to_gui(0);

draw_set_halign(0);
draw_set_valign(0);
if (instance_exists(obj_player))
    {
    var dx = 4;
    var dy = 0;
    draw_text_outline(dx,2+dy++*14,"Player States");
    draw_text_outline(dx+6,2+dy++*14,"Movement: "+string(mText[obj_player.move_state]));
    draw_text_outline(dx+6,2+dy++*14,"Animation: "+string(aText[obj_player.anim_state]));
    
    draw_text_outline(dx,2+dy++*14,"Sprites");
    for(var i=0; i&lt;doll.size; i++;)
        {
        if (!obj_player.draw[i])
            continue;
        
        if (edit_type == i)
            {
            draw_rectangle_color(dx+6,2+dy*14,128,2+dy*14+13,$AAAAAA,$AAAAAA,$AAAAAA,$AAAAAA,0);
            draw_text_outline(dx+6,2+dy++*14,string(dText[i])+" "+string(sprite_get_name(obj_player.spr_id[i])));
            }
        else if (point_in_rectangle(ux,uy,dx+6,2+dy*14,128,2+dy*14+13))
            {
            if (mouse_check_button_pressed(mb_left))
                edit_type = i;
            draw_text_outline(dx+6,2+dy++*14,string(dText[i])+" "+string(sprite_get_name(obj_player.spr_id[i])));
            }
        else
            draw_text_outline(dx+6,2+dy++*14,string(dText[i])+" "+string(sprite_get_name(obj_player.spr_id[i])),$CCCCCC,$444444);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_player))
    {
    // draw black bg
    draw_set_color($000000);
    draw_set_alpha(0.75);
    draw_rectangle(0,0,view_wview[0],view_hview[0],0);
    
    panel_x = 128;
    panel_y = 64;
    for(var i=0; i&lt;doll.size; i++;)
        {
        if (!obj_player.draw[i])
            continue;
       panel_y += 14;
        }
    draw_rectangle(0,0,panel_x,panel_y,0);
    
    draw_set_alpha(1.0);
    
    if (keyboard_check(vk_control))
        {
        with(obj_player)
            {
            draw_sprite_ext(yolo_legs_idle_spr,0,x,y,dir,1,0,-1,0.5);
            draw_sprite_ext(yolo_arms_0_spr,0,x,y,dir,1,0,-1,0.5);
            }
        }
    
    // draw player
    with(obj_player)
        event_perform(ev_draw,0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
