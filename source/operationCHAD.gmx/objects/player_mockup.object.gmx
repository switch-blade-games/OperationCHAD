<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>pepe_place_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf_mockup = -1;

mText[mState.idle]  = "idle";
mText[mState.walk]  = "walk";
mText[mState.lock]  = "lock";
mText[mState.duck]  = "duck";
mText[mState.hang]  = "hang";
mText[mState.climb] = "climb";
mText[mState.dead]  = "dead";

aText[aState.idle]  = "idle";
aText[aState.walk]  = "walk";
aText[aState.drop]  = "drop";
aText[aState.roll]  = "roll";
aText[aState.duck]  = "duck";
aText[aState.hang]  = "hang";
aText[aState.climb] = "climb";
aText[aState.dead]  = "dead";

mx = 0;
my = 0;
click = -1;
click_x = 0;
click_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf_mockup))
    draw_surface(surf_mockup,view_wview[0]/2,0);

draw_set_halign(0);
draw_set_valign(0);
if (instance_exists(obj_player))
    {
    var dx = view_wview[0]/2;
    var dy = 0;
    draw_text_outline(dx+4,2+dy++*14,"Player States");
    draw_text_outline(dx+10,2+dy++*14,"Movement: "+string(mText[obj_player.move_state]));
    draw_text_outline(dx+10,2+dy++*14,"Animation: "+string(aText[obj_player.anim_state]));
    
    draw_text_outline(dx+4,2+dy++*14,"Sprites");
    if (obj_player.full_sprite)
        draw_text_outline(dx+10,2+dy++*14,"Full: "+string(sprite_get_name(obj_player.full_sprite_index)));
    else
        {
        draw_text_outline(dx+10,2+dy++*14,"Leg: "+string(sprite_get_name(obj_player.leg_sprite_index)));
        draw_text_outline(dx+10,2+dy++*14,"Arm: "+string(sprite_get_name(obj_player.arm_sprite_index)));
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx = device_mouse_x_to_gui(0)-view_wview[0]/2;
my = device_mouse_y_to_gui(0);

if (!surface_exists(surf_mockup))
    surf_mockup = surface_create(view_wview[0]/2,view_hview[0]);

surface_set_target(surf_mockup);
draw_clear(background_color);

draw_set_color($000000);
if (instance_exists(obj_player))
    {
    if (mouse_check_button_pressed(mb_right))
    or (keyboard_check_pressed(vk_alt))
        obj_player.debug_freeze = !obj_player.debug_freeze;
    
    xpos = obj_player.x;
    ypos = obj_player.y;
    
    with(obj_player)
        {
        x = view_wview[0]/4;
        y = 136;
        event_perform(ev_draw,0);
        }
    
    if (obj_player.full_sprite)
        {
        with(obj_player)
            {
            var ox = sprite_get_xoffset(full_sprite_index);
            var oy = sprite_get_yoffset(full_sprite_index);
            var sw = sprite_get_width(full_sprite_index);
            var sh = sprite_get_height(full_sprite_index);
            
            debug_draw = 0;
            x = view_wview[0]/4;
            y = 204;
            event_perform(ev_draw,0);
            draw_rectangle(x-sw/2,y-sh,x+sw/2,y,1);
            draw_text_outline(x-sw/2,y+6,"("+string(ox)+","+string(oy)+")");
            }
        if (point_in_rectangle(mx,my,obj_player.x-sw/2,obj_player.y-sh,obj_player.x+sw/2,obj_player.y))
            {
            if (mouse_check_button_pressed(mb_left)) and (click == -1)
                {
                click = obj_player.debug_draw;
                click_x = mx;
                click_y = my;
                }
            if (mouse_check_button_pressed(mb_middle))
                sprite_set_offset(obj_player.full_sprite_index,sprite_get_width(obj_player.full_sprite_index)/2,sprite_get_height(obj_player.full_sprite_index));
            }
        if (mouse_check_button(mb_left)) and (click == 0)
            sprite_set_offset(obj_player.full_sprite_index,ox-(mx-click_x)*obj_player.full_dir,oy-(my-click_y));
        }
    else
        {
        with(obj_player)
            {
            var ox = sprite_get_xoffset(leg_sprite_index);
            var oy = sprite_get_yoffset(leg_sprite_index);
            var sw = sprite_get_width(leg_sprite_index);
            var sh = sprite_get_height(leg_sprite_index);
            
            debug_draw = 1;
            x = view_wview[0]/4-40;
            y = 204;
            event_perform(ev_draw,0);
            draw_rectangle(x-sw/2,y-sh,x+sw/2,y,1);
            draw_text_outline(x-sw/2,y+6,"("+string(ox)+","+string(oy)+")");
            }
        if (point_in_rectangle(mx,my,obj_player.x-sw/2,obj_player.y-sh,obj_player.x+sw/2,obj_player.y))
            {
            if (mouse_check_button_pressed(mb_left)) and (click == -1)
                {
                click = obj_player.debug_draw;
                click_x = mx;
                click_y = my;
                }
            if (mouse_check_button_pressed(mb_middle))
                sprite_set_offset(obj_player.leg_sprite_index,sprite_get_width(obj_player.leg_sprite_index)/2,sprite_get_height(obj_player.leg_sprite_index));
            }
        if (mouse_check_button(mb_left)) and (click == 1)
            sprite_set_offset(obj_player.leg_sprite_index,ox-(mx-click_x)*obj_player.leg_dir,oy-(my-click_y));
        with(obj_player)
            {
            var ox = sprite_get_xoffset(arm_sprite_index);
            var oy = sprite_get_yoffset(arm_sprite_index);
            var sw = sprite_get_width(arm_sprite_index);
            var sh = sprite_get_height(arm_sprite_index);
            
            debug_draw = 2;
            x = view_wview[0]/4+40;
            y = 204;
            event_perform(ev_draw,0);
            draw_rectangle(x-sw/2,y-sh,x+sw/2,y,1);
            draw_text_outline(x-sw/2,y+6,"("+string(ox)+","+string(oy)+")");
            }
        if (point_in_rectangle(mx,my,obj_player.x-sw/2,obj_player.y-sh,obj_player.x+sw/2,obj_player.y))
            {
            if (mouse_check_button_pressed(mb_left)) and (click == -1)
                {
                click = obj_player.debug_draw;
                click_x = mx;
                click_y = my;
                }
            if (mouse_check_button_pressed(mb_middle))
                sprite_set_offset(obj_player.arm_sprite_index,sprite_get_width(obj_player.arm_sprite_index)/2,sprite_get_height(obj_player.arm_sprite_index));
            }
        if (mouse_check_button(mb_left)) and (click == 2)
            sprite_set_offset(obj_player.arm_sprite_index,ox-(mx-click_x)*obj_player.arm_dir,oy-(my-click_y));
        }
    
    if (mouse_check_button(mb_left))
        {
        if (click &gt; -1)
            {
            click_x = mx;
            click_y = my;
            }
        }
    else
        click = -1;
    
    obj_player.x = xpos;
    obj_player.y = ypos;
    obj_player.debug_draw = -1;
    }

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
