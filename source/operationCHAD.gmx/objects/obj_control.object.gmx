<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// instance is created in room creation code

// view/display/gui setup
view_wview[0] = 400;
view_hview[0] = 240;
window_set_size(view_wview[0]*2,view_hview[0]*2);
window_set_position(display_get_width()/2-view_wview[0],display_get_height()/2-view_hview[0]);
surface_resize(application_surface,view_wview[0],view_hview[0]);
gui_w = view_wview[0];
gui_h = view_hview[0];
display_set_gui_size(gui_w,gui_h);

draw_set_font(fnt_default);
background_color = $CAC26D;

global.crt = false;
global.autotile = true;
global.ramptype = false;

enum tile_side {
    none = 0,
    right = 1,
    left = 2,
    top = 4,
    bottom = 8
    }

instance_create(0,0,obj_shadows);
instance_create(0,0,obj_shader);

// gamepad
gamepad_init();

// key binds
global.key_up[0] = vk_up;
global.key_down[0] = vk_down;
global.key_left[0] = vk_left;
global.key_right[0] = vk_right;
global.key_fire[0] = ord("Z");
global.key_jump[0] = ord("X");

global.pad_up[0] = gp_padu;
global.pad_down[0] = gp_padd;
global.pad_left[0] = gp_padl;
global.pad_right[0] = gp_padr;
global.pad_fire[0] = gp_face3;
global.pad_jump[0] = gp_face1;

// debug
global.shadow_time = 0;
global.shader_time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_update();

// walls set global.autotile to true when created or destroyed
if (global.autotile)
    {
    global.autotile = false;
    
    tile_layer_delete(10);
    with(obj_wall)
        tile_add(tile_walls,0,0,20,20,x,y,10);
    with(obj_wall_jt)
        tile_add(tile_walls,20,0,20,20,x,y,10);
    with(obj_ramp_r)
        tile_add(tile_walls,0,20,20,20,x,y,10);
    with(obj_ramp_l)
        tile_add(tile_walls,20,20,20,20,x,y,10);
    with(obj_climb_r)
        tile_add(tile_walls,0,40,20,20,x,y,10);
    with(obj_climb_l)
        tile_add(tile_walls,20,40,20,20,x,y,10);
    with(obj_mb)
        tile_add(tile_walls,0,60,20,20,x,y,10);
    with(obj_mb_r)
        tile_add(tile_walls,20,60,40,40,x,y,10);
    with(obj_mb_l)
        tile_add(tile_walls,60,60,40,40,x,y,10);
    }

if (keyboard_check_pressed(ord("Q")))
    global.ramptype = !global.ramptype;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color($000000);
draw_rectangle(0,0,192,40,0);
draw_rectangle(view_wview[0]-192,0,view_wview[0],20,0);

draw_set_color($FFFFFF);
if (global.ramptype)
    {
    draw_text(6,4,"Slope Movement: NORMALIZED");
    draw_text(6,20,"Press [Q] to switch");
    }
else
    {
    draw_text(6,4,"Slope Movement: SMOOTH");
    draw_text(6,20,"Press [Q] to switch");
    }
draw_text(view_wview[0]-192+6,4,"[W] to toggle CRT Shader");

//draw_text(6,128,"shadows: "+string(global.shadow_time)+"ms");
//draw_text(6,144,"shaders: "+string(global.shader_time)+"ms");

draw_set_color($000000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
