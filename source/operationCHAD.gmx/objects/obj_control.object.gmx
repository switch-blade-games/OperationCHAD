<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// instance is created in room creation code

enum tile_side
    {
    none = 0,
    right = 1,
    top = 2,
    left = 4,
    bottom = 8,
    full = 15
    }

// view/window/gui
gui_w = view_wview[0];
gui_h = view_hview[0];

last_gpcount = global.gpcount;
last_pause = global.pause;
surf_pause = -1;

verlet_init();

global.echo_num = 0;
global.echo_list = ds_list_create();

snd = bullet_snd;
decay = 0.1;
delay = 0.1 * 1000000;
pitch = 0.1;
gain = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>last_gpcount = global.gpcount;
gamepad_update();

var time = get_timer();

if (global.echo_num &gt; 0)
    {
    for(var i=0; i&lt;global.echo_num; i++;)
        {
        var snd_id      = global.echo_list[|i*6+0];
        var snd_gain    = global.echo_list[|i*6+1];
        var snd_time    = global.echo_list[|i*6+2];
        var snd_decay   = global.echo_list[|i*6+3];
        var snd_delay   = global.echo_list[|i*6+4];
        var snd_pitch   = global.echo_list[|i*6+5];
        
        if (time &gt;= snd_time)
            {
            snd_gain -= snd_decay;
            snd_time += snd_delay;
            if (snd_gain &gt; 0)
                {
                global.echo_list[|i*5+1] = snd_gain;
                global.echo_list[|i*5+2] = snd_time;
                
                snd_play(snd_id,snd_pitch,snd_gain);
                }
            else
                {
                repeat(6)
                    ds_list_delete(global.echo_list,i*6+0);
                global.echo_num--;
                i--;
                }
            }
        }
    }

// controller disconnected
if (global.gpcount &lt; last_gpcount) and (!global.pause)
    {
    global.pause = true;
    instance_create(0,0,obj_gamepad_disconnect);
    }

// pausing
if (keyboard_check_pressed(ord("P")))
or (gamepad_check_pressed_all(gpinput.start))
    global.pause = !global.pause;

if (global.pause != last_pause)
    {
    last_pause = global.pause;
    if (global.pause)
        {
        surf_pause = surface_create(view_wview[0],view_hview[0]);
        
        surface_set_target(surf_pause);
        draw_clear(background_color);
        draw_surface(application_surface,0,0);
        surface_reset_target();
        
        instance_deactivate_all(true);
        instance_activate_object(obj_gamepad_disconnect);
        }
    else
        {
        if (surface_exists(surf_pause))
            surface_free(surf_pause);
        surf_pause = -1;
        
        instance_activate_all();
        }
    }

if (keyboard_check(vk_numpad1))
    decay = max(0.01,decay-0.01);
if (keyboard_check(vk_numpad3))
    decay = min(1.00,decay+0.01);
if (keyboard_check(vk_numpad4))
    delay = max(0.01*1000000,delay - 0.01*1000000);
if (keyboard_check(vk_numpad6))
    delay = min(0.50*1000000,delay + 0.01*1000000);
if (keyboard_check(vk_numpad7))
    pitch = max(0.00,pitch-0.01);
if (keyboard_check(vk_numpad9))
    pitch = min(0.50,pitch+0.01);
if (keyboard_check_pressed(vk_numpad0))
    snd_play_echo(snd,decay,delay,pitch,gain);

// verlet "physics"
var time = get_timer();
verlet_update();
global.vtime = get_timer()-time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause and surface_exists(surf_pause))
    {
    if (instance_exists(obj_shader))
        {
        shader_set(shd_crt);
        shader_set_uniform_f(obj_shader.u_curve,global.curve);
        shader_set_uniform_f(obj_shader.u_scan,global.scan);
        draw_surface(surf_pause,0,0);
        shader_reset();
        }
    else
        draw_surface(surf_pause,0,0);
    
    draw_set_color($000000);
    draw_set_alpha(0.75);
    draw_rectangle(0,0,view_wview[0],view_hview[0],0);
    draw_set_alpha(1.0);
    
    if (!instance_exists(obj_gamepad_disconnect))
        {
        draw_set_font(global.fnt_joystix);
        draw_set_color($FFFFFF);
        draw_set_halign(1);
        draw_set_valign(1);
        draw_text_outline(view_wview[0]/2,view_hview[0]/3,"PAUSED");
        draw_set_valign(0);
        draw_set_halign(0);
        draw_set_color($000000);
        }
    }

    
    
draw_set_valign(0);
draw_set_halign(0);

exit
draw_text(12,12,"snd:" +string(snd));
draw_text(12,24,"decay:" +string(decay));
draw_text(12,36,"delay:" +string(delay));
draw_text(12,48,"pitch:" +string(pitch));
draw_text(12,60,"gain:" +string(gain));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
