<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>BG_drawer_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum camState
    {
    static = 0,
    right = 1,
    up = 2,
    left = 4,
    down = 8,
    free = 15
    }

xstart = x;
ystart = y;
cam_x = x;
cam_y = y;
cam_w = view_wview[0]; // camera width
cam_h = view_hview[0]; // camera height
cam_ox = -cam_w/2; // cam x-offset
cam_oy = -cam_h/2; // cam y-offset
cam_x1 = 0;
cam_y1 = 0;
cam_x2 = room_width;
cam_y2 = room_height;

cam_state = camState.static;
target = par_actor;
cam_lerp = 0.8;

// audio listener
audio_falloff_set_model(audio_falloff_exponent_distance);
audio_listener_position(x,y,0);
audio_listener_orientation(x,y,1000,0,-1,0);
audio_listener_velocity(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// follow target
event_user(0);

// apply screenshake
cam_x += global.xnudge;
cam_y += global.ynudge;
if (global.xshake &gt; 1)
    cam_x += random_range(-global.xshake,global.xshake);
if (global.yshake &gt; 1)
    cam_y += random_range(-global.yshake,global.yshake);

// move camera
event_user(1);

// decay screenshake values
global.xnudge *= 0.8;
global.ynudge *= 0.8;
global.xshake *= 0.8;
global.yshake *= 0.8;

// move audio listener to camera position
audio_listener_position(x,y,0);
audio_listener_orientation(x,y,1000,0,-1,0);
audio_listener_velocity(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVE CAMERA

// camera bounds
cam_x = clamp(cam_x,cam_x1+cam_w/2,cam_x2-cam_w/2);
cam_y = clamp(cam_y,cam_y1+cam_h/2,cam_y2-cam_h/2);

// move the camera
view_xview[0] += ((cam_x+cam_ox)-view_xview[0])*cam_lerp;
view_yview[0] += ((cam_y+cam_oy)-view_yview[0])*cam_lerp;
view_xview[0] = round(view_xview[0]);
view_yview[0] = round(view_yview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FOLLOW TARGET

if (cam_state == camState.static) or (!instance_exists(target))
    exit;

var target_xmin = +9999;
var target_ymin = +9999;
var target_xmax = -9999;
var target_ymax = -9999;
with(target)
    {
    if (x &lt; target_xmin)
        target_xmin = x;
    if (x &gt; target_xmax)
        target_xmax = x;
    if (y &lt; target_ymin)
        target_ymin = y;
    if (y &gt; target_ymax)
        target_ymax = y;
    }

xprevious = x;
yprevious = y;
if (cam_state &amp; camState.right == camState.right)
and (target_xmax &gt; x) and (target_xmin &gt; x - view_wview[0]/2 + 20)
    x = target_xmax;
if (cam_state &amp; camState.up == camState.up)
and (target_ymin &lt; y) and (target_ymax &lt; y + view_hview[0]/2 - 20)
    y = target_ymin;
if (cam_state &amp; camState.left == camState.left)
and (target_xmin &lt; x) and (target_xmax &lt; x + view_wview[0]/2 - 20)
    x = target_xmin;
if (cam_state &amp; camState.down == camState.down)
and (target_ymax &gt; y) and (target_ymin &gt; y - view_hview[0]/2 + 20)
    y = target_ymax;

cam_x = x;
cam_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
