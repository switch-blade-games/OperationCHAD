<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_actor</parentName>
  <maskName>msk_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

debug_draw = -1;
debug_freeze = false;

gamepad_slot = 0;

// player move states
enum mState
    {
    idle,
    walk,
    duck,
    hang,
    climb,
    moto,
    dead
    }

// animation state
enum aState
    {
    idle,
    walk,
    ramp_idle,
    ramp_walk,
    drop,
    roll,
    duck,
    hang,
    hang_move,
    climb,
    climb_move,
    moto,
    moto_fire,
    dead,
    size
    }

// player skins
enum skin
    {
    pepe,
    stonetoss,
    foxford,
    yoloswag,
    pumpkinhead
    }

// player skin sprites
enum skin_spr
    {
    leg_idle,
    leg_idle_r,
    leg_idle_l,
    leg_duck_r,
    leg_duck_l,
    leg_walk,
    leg_drop,
    leg_hang,
    leg_climb,
    leg_moto,
    arm_0,
    arm_45,
    arm_90,
    arm_135,
    arm_180,
    arm_225,
    arm_270,
    arm_315,
    arm_single_0,
    arm_single_45,
    arm_single_90,
    arm_single_135,
    arm_single_180,
    arm_single_225,
    arm_single_270,
    arm_single_315,
    arm_climb_0,
    arm_climb_45,
    arm_climb_90,
    arm_climb_135,
    arm_climb_180,
    arm_climb_225,
    arm_climb_270,
    arm_climb_315,
    full_roll,
    full_duck,
    full_hang,
    full_climb,
    full_moto,
    full_dead_idle,
    full_dead_roll,
    full_dead_down,
    extra_arm_moto,
    extra_moto,
    size
    }

enum doll
    {
    full,
    arms,
    legs,
    back,
    moto,
    size
    }

// player motion state/flags
no_clip = false;
move_state = mState.walk;
on_ground = false;
on_ramp = false;
on_moto = false;
lock = false;
drop = false;
invulnerable = false;
invulnerable_flash = false;
invulnerable_time = 0; // set to 180 when respawn
invulnerable_rate = 3; // higher = slower
ramp_slope = 1;
climb_side = tile_side.none;
grace_jump = 0; // 6
hang_id = noone;
hang_offset = 0;
old_hang_offset = 0;
no_hang = false;
moto_y = 0;
moto_yspeed = 0;
moto_shake = 0;

// player position/physics
walk_speed = 2;
moto_speed = 3;
hang_speed = 2;
climb_speed = 2;
grav = 0.4;
fric = 1;
xspeed = 0;
yspeed = 0;
subx = 0;
suby = 0;
xpre = x;
ypre = y;

// player orientation
aim = 0;
dir = 1;

// player weapon
weapon_stats();
cur_weapon = weapon.rifle;
shoot_timer = 0;
flame_ang = 0;
gun_y = -18;

// death/respawn
dead_timer = 120;
dead_moto = false;
xstart = x;
ystart = y;

// player animation
player_skin = skin.yoloswag;
anim_state = aState.idle;
anim_slope = 0;

for(var i=0; i&lt;doll.size; i++;)
    {
    img_index[i] = 0;
    spr_ox[i] = 0;
    spr_oy[i] = 0;
    }
paperdoll_clear();
update_skin(player_skin);

walk_y[0] = 0;
walk_y[1] = -1;
walk_y[2] = -3;
walk_y[3] = -3;
walk_y[4] = -2;
walk_y[5] = 0;
walk_y[6] = -1;
walk_y[7] = -3;
walk_y[8] = -3;
walk_y[9] = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_freeze)
    exit;

input();
apply_gravity();
apply_input();
apply_force();
animate();
collide();

// weapon
if (shoot_timer &gt; 0)
    shoot_timer--;
if (cur_weapon == 3) and (flame_ang != aim)
    flame_ang -= clamp(angle_difference(flame_ang,aim),-10,10);

// dead
if (move_state == mState.dead)
    {
    if (dead_timer &gt; 0)
        dead_timer--;
    else
        {
        dead_timer = 120;
        invulnerable = true;
        invulnerable_time = 180;
        
        dead_moto = false;
        if (instance_exists(motor_controller))
        or (instance_exists(sub_controller))
            dead_moto = true;
        
        if (dead_moto)
            {
            move_state = mState.moto;
            drop = false;
            
            y = moto_y;
            }
        else
            {
            move_state = mState.walk;
            drop = true;
            
            if (instance_exists(obj_camera))
                {
                if (point_in_rectangle(xstart,ystart,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]))
                    {
                    x = xstart;
                    y = ystart;
                    }
                else
                    {
                    x = view_xview[0]+64;
                    y = view_yview[0];
                    }
                }
            else
                {
                x = xstart;
                y = ystart;
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_enemy_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (team == other.team) or (nohit) or (invulnerable)
    exit;

if (move_state != mState.dead)
    {
    move_state = mState.dead;
    on_ground = false;
    xspeed = sign(x-other.x)*2;
    yspeed = -8;
    
    //with(other)
    //    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (team == other.team) or (!other.killOnContact) or (nohit) or (invulnerable)
    exit;

if (move_state != mState.dead)
    {
    move_state = mState.dead;
    on_ground = false;
    xspeed = sign(x-other.x)*2;
    yspeed = -8;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invulnerable)
    {
    if (invulnerable_time &gt; 0)
        {
        invulnerable_time--;
        if (invulnerable_time mod invulnerable_rate == 0)
            invulnerable_flash = !invulnerable_flash;
        }
    else
        {
        invulnerable = false;
        invulnerable_flash = false;
        }
    
    if (invulnerable_flash)
        shader_set(shd_flash);
    }

if (on_moto)
    var mShake = moto_shake;
else
    var mShake = 0;

if (draw[doll.back])
    draw_sprite_ext(spr_id[doll.back],img_index[doll.back],x+spr_ox[doll.back]*spr_dir[doll.back],y+spr_oy[doll.back]+mShake,spr_dir[doll.back],1,0,-1,1);
if (draw[doll.moto])
    draw_sprite_ext(spr_id[doll.moto],img_index[doll.moto],x+spr_ox[doll.moto]*spr_dir[doll.moto],moto_y+spr_oy[doll.moto]+mShake,spr_dir[doll.moto],1,0,-1,1);
if (draw[doll.full])
    draw_sprite_ext(spr_id[doll.full],img_index[doll.full],x+spr_ox[doll.full]*spr_dir[doll.full],y+spr_oy[doll.full]+mShake,spr_dir[doll.full],1,0,-1,1);
if (draw[doll.legs])
    draw_sprite_ext(spr_id[doll.legs],img_index[doll.legs],x+spr_ox[doll.legs]*spr_dir[doll.legs],y+spr_oy[doll.legs]+mShake,spr_dir[doll.legs],1,0,-1,1);
if (draw[doll.arms])
    draw_sprite_ext(spr_id[doll.arms],img_index[doll.arms],x+spr_ox[doll.arms]*spr_dir[doll.arms],y+spr_oy[doll.arms]+mShake+walk_y[img_index[doll.legs]],spr_dir[doll.arms],1,0,-1,1);

if (invulnerable)
    {
    if (invulnerable_flash)
        shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
