<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>msk_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>face = 1;
aim = 0;

grav = 0.4;
fric = 1;
xspeed = 0;
yspeed = 0;

crouch = false;
double_jump = false;

shoot_timer = 0;
recoil = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// aim and face the mouse
aim = point_direction(x,y,mouse_x,mouse_y);
aim = round(aim/45)*45;
if (mouse_x &gt;= x)
    face = +1;
else
    face = -1;

if (mouse_check_button(mb_left))
    {
    if (shoot_timer == 0)
        {
        shoot_timer = 9;
        recoil = 4;
        
        // aim vector
        var ldx = lengthdir_x(1,aim);
        var ldy = lengthdir_y(1,aim);
        
        // bullet
        var inst = instance_create(x+ldx*16,y+crouch_y+ldy*16,obj_bullet);
        inst.direction = aim;
        inst.speed = 12;
        inst.image_angle = aim;
        inst.image_yscale = choose(-1,1);
        
        // bullet/shell casing
        var inst = instance_create(x+ldx*12,y+crouch_y+ldy*12,obj_casing);
        inst.direction = aim+random_range(130,160);
        inst.speed = 6+random(2);
        
        // smoke
        repeat(3)
            {
            var inst = instance_create(x+ldx*12,y+crouch_y+ldy*12,obj_dust);
            inst.direction = aim+random_range(-15,15);
            inst.speed = 6+random(2);
            inst.friction = 0.8;
            inst.image_xscale *= 0.5;
            inst.image_yscale *= 0.5;
            inst.fade = 0.1;
            }
        }
    }

if (shoot_timer &gt; 0)
    shoot_timer--;
if (recoil &gt; 0)
    recoil--;

// crouch/fall through floors
if (crouch)
    {
    if (!keyboard_check(global.key_down[0]))
        {
        if (!place_meeting(x,y-1,par_solid))
            {
            // stop crouching
            crouch = false;
            sprite_index = msk_player;
            mask_index = msk_player;
            }
        }
    }
else
    {
    if (keyboard_check_pressed(global.key_down[0]))
        {
        if (on_ground and place_meeting(x,y+1,par_jt))
        and (!place_meeting(x,y+1,par_solid))
            {
            // fall through jump through platform
            on_ground = false;
            y += 1;
            }
        else
            {
            // crouch
            crouch = true;
            sprite_index = msk_player_crouch;
            mask_index = msk_player_crouch;
            }
        }
    }

// detect if we're standing on ground
on_ground = false;
if (place_meeting(x,y+1,par_solid))
or (!place_meeting(x,y,par_jt) and place_meeting(x,y+1,par_jt) and yspeed &gt;= 0)
    {
    // on the ground
    on_ground = true;
    // reset double jump to true when we land
    double_jump = true;
    }

// gravity
if !(on_ground)
    yspeed += grav;

// horizontal movement input
move_speed = 3-crouch;
if (keyboard_check(global.key_right[0])-keyboard_check(global.key_left[0]) != 0)
    {
    // move left or right
    if (keyboard_check(global.key_right[0]))
        xspeed = +move_speed;
    if (keyboard_check(global.key_left[0]))
        xspeed = -move_speed;
    }
else
    {
    // friction
    if (xspeed &gt; 0)
        xspeed = max(0,xspeed-fric);
    else if (xspeed &lt; 0)
        xspeed = min(0,xspeed+fric);
    }

// jump
if (keyboard_check_pressed(global.key_up[0]))
    {
    if (on_ground)
        {
        // first jump
        on_ground = false;
        yspeed = -7;
        
        repeat(5)
            {
            var inst = instance_create(x+random_range(-8,8),y+16,obj_dust);
            inst.direction = choose(0,180)+random_range(-15,15);
            inst.speed = 4+random(2);
            }
        }
    else if (double_jump)
        {
        // double jump
        double_jump = false;
        yspeed = -7;
        
        repeat(5)
            {
            var inst = instance_create(x+random_range(-8,8),y+16,obj_dust);
            inst.direction = choose(0,180)+random_range(-15,15);
            inst.speed = 3+random(2);
            }
        }
    }

// horizontal collision detection/response
var tx = round(abs(xspeed));
if (tx &gt; 0)
    {
    var ux = sign(xspeed);
    repeat(tx)
        {
        if (place_meeting(x+ux,y,par_solid))
            {
            // stop before moving into the wall
            xspeed = 0;
            break;
            }
        else
            x += ux;
        }
    }

// vertical collision detection/response
var ty = round(abs(yspeed));
if (ty &gt; 0)
    {
    // split up vertical collision checks
    // check downward independently from upward
    // lets us detect one way platforms
    
    if (yspeed &gt; 0)
        {
        // check downward
        var uy = sign(yspeed);
        repeat(ty)
            {
            if (place_meeting(x,y+uy,par_solid))
            or (place_meeting(x,y+uy,par_jt) and !place_meeting(x,y,par_jt))
                {
                // stop before moving into the wall
                yspeed = 0;
                break;
                }
            else
                y += uy;
            }
        }
    else if (yspeed &lt; 0)
        {
        // check upward
        var uy = sign(yspeed);
        repeat(ty)
            {
            if (place_meeting(x,y+uy,par_solid))
                {
                // stop before moving into the wall
                yspeed = 0;
                break;
                }
            else
                y += uy;
            }
        }
    }

// simple shitty camera
view_wview[0] = 480;
view_hview[0] = 270;
view_xview[0] += ((x-view_wview[0]/2)-view_xview[0])*0.2;
view_yview[0] += ((y-view_hview[0]/2)-view_yview[0])*0.2;
view_xview[0] = round(view_xview[0]);
view_yview[0] = round(view_yview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

crouch_y = -4 + crouch*8;

var ldx = lengthdir_x(1,aim);
var ldy = lengthdir_y(1,aim);
draw_set_color($000000);

armdis = max(0,8-recoil);

draw_sprite_ext(spr_guns,0,x+ldx*armdis,y+crouch_y+ldy*armdis,1,face,aim,-1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
