<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_actor</parentName>
  <maskName>msk_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

slot = -1;

// player move states
enum mState
    {
    walk,
    duck,
    mb,
    wc,
    moto,
    dead,
    size
    }

enum aState
    {
    walk,
    walk_fire,
    idle,
    duck,
    idle_ramp,
    duck_ramp,
    wc,
    wc_move,
    wc_fire,
    mb,
    mb_move,
    mb_fire,
    roll,
    moto,
    dead_lean,
    dead_roll,
    dead,
    size
    }

// player skins
enum skin
    {
    stone,
    foxford,
    yolo,
    pumpkin,
    size
    }

enum anim
    {
    walk,
    walk_fire,
    idle,
    duck,
    idle_ramp_d,
    duck_ramp_d,
    idle_ramp_u,
    duck_ramp_u,
    wc,
    wc_fire,
    mb,
    mb_fire,
    moto,
    moto_fire,
    roll,
    dead_roll,
    dead,
    size
    }

// player motion state/flags
no_clip = false;
move_state = mState.walk;
on_ground = false;
on_ramp = false;
on_moto = false;
lock = false;
drop = false;
invulnerable = false;
invulnerable_flash = false;
invulnerable_time = 0; // set to 180 when respawn
invulnerable_rate = 3; // higher = slower
grace_jump = 0; // 6
ramp_slope = 1;
wc_side = tile_side.none;
mb_id = noone;
mb_offset = 0;
mb_offset_old = 0;
no_mb = false;
no_mb_time = false;
moto_y = 0;
moto_yspeed = 0;
moto_shake = 0;

// player position/physics
walk_speed = 2;
moto_speed = 3;
mb_speed = 2;
wc_speed = 2;
fall_speed = 10;
grav = 0.4;
fric = 1;
xspeed = 0;
yspeed = 0;
subx = 0;
suby = 0;
xpre = x;
ypre = y;

// player orientation
aim = 0;
dir = 1;
face = 1;

// player weapon
weapon_stats();
cur_weapon = weapon.rifle;
shoot_timer = 0;
flame_ang = 0;
gun_y = -18;

// death/respawn
dead_timer = 120;
dead_moto = false;
xstart = x;
ystart = y;

anim_init();

// load skin
skin_id = skin.stone;

anim_find_skin();
anim_load_skin(sheet_path[skin_id],json_path[skin_id]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// autosprite
if (autosprite_timer &gt; 0)
    autosprite_timer--;
else
    {
    autosprite_timer = 60;
    if (file_exists(sheet_path[skin_id])) and (file_exists(json_path[skin_id]))
        {
        var sheet_sha1_new = sha1_file(sheet_path[skin_id]);
        var json_sha1_new  = sha1_file(json_path[skin_id]);
        
        if (sheet_sha1_new != sheet_sha1)
        or (json_sha1_new != json_sha1)
            {
            sheet_sha1 = sheet_sha1_new;
            json_sha1 = json_sha1_new;
            
            if (sprite_exists(spr_index))
                sprite_delete(spr_index);
            spr_index = -1;
            
            anim_load_skin(sheet_path[skin_id],json_path[skin_id]);
            }
        }
    }

// debug skin testing
if (keyboard_check_pressed(vk_f2))
or (gamepad_check_pressed_all(gpinput.bumpl))
    {
    skin_id++;
    if (skin_id &gt;= skin.size)
        skin_id = skin.stone;
    
    anim_find_skin();
    anim_load_skin(sheet_path[skin_id],json_path[skin_id]);
    }

//if (debug_freeze)
//    exit;

input();
detect();
apply_gravity();
apply_input();
apply_force();
collide();
animate();

// hang time
if (no_mb_time &gt; 0)
    no_mb_time--;
// weapon
if (shoot_timer &gt; 0)
    shoot_timer--;
if (cur_weapon == weapon.flame) and (flame_ang != aim)
    flame_ang -= clamp(angle_difference(flame_ang,aim),-10,10);

// dead
if (move_state == mState.dead)
    {
    if (dead_timer &gt; 0)
        dead_timer--;
    else
        {
        dead_timer = 120;
        invulnerable = true;
        invulnerable_time = 180;
        
        dead_moto = false;
        if (instance_exists(motor_controller))
        or (instance_exists(sub_controller))
            dead_moto = true;
        
        yspeed = 0;
        no_mb = false;
        mb_id = noone;
        
        if (dead_moto)
            {
            move_state = mState.moto;
            drop = false;
            
            y = moto_y;
            }
        else
            {
            move_state = mState.walk;
            drop = true;
            
            if (instance_exists(JB_cam))
                {
                
                if(global.P1LIVES&lt;=0)
                room_goto(game_over_room)
                
                if (point_in_rectangle(xstart,ystart,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]))
                    {
                    x = xstart;
                    y = ystart;
                    }
                else
                    {
                    x = view_xview[0]+64;
                    y = view_yview[0];
                    }
                }
            else
                {
                x = xstart;
                y = ystart;
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_death">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (move_state != mState.dead)
    {
    
    global.P1LIVES-=1
    
    move_state = mState.dead;
    on_ground = false;
    xspeed = sign(x-other.x)*2;
    yspeed = -8;
    
    if (instance_exists(obj_shader))
        obj_shader.flash = 3;
    
    //with(other)
    //    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_enemy_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (team == other.team) or (nohit) or (invulnerable)
    exit;

if (move_state != mState.dead)
    {
    
    global.P1LIVES-=1
    
    move_state = mState.dead;
    on_ground = false;
    xspeed = sign(x-other.x)*2;
    yspeed = -8;
    
    if (instance_exists(obj_shader))
        obj_shader.flash = 3;
    
    //with(other)
    //    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (team == other.team) or (!other.killOnContact) or (nohit) or (invulnerable)
    exit;

if (move_state != mState.dead)
    {
    
    global.P1LIVES-=1
    
    move_state = mState.dead;
    on_ground = false;
    xspeed = sign(x-other.x)*2;
    yspeed = -8;
    
    if (instance_exists(obj_shader))
        obj_shader.flash = 3;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (on_moto)
    var mShake = moto_shake;
else
    var mShake = 0;

if (invulnerable)
    {
    if (invulnerable_time &gt; 0)
        {
        invulnerable_time--;
        if (invulnerable_time mod invulnerable_rate == 0)
            invulnerable_flash = !invulnerable_flash;
        }
    else
        {
        invulnerable = false;
        invulnerable_flash = false;
        }
    
    if (invulnerable_flash)
        shader_set(shd_flash);
    }

var _f = floor(img_index);
var tx = frame_info[_f,FRAME_TEX_X];
var ty = frame_info[_f,FRAME_TEX_Y];
var tw = frame_info[_f,FRAME_TEX_W];
var th = frame_info[_f,FRAME_TEX_H];

draw_sprite_part_ext(spr_index,0,tx,ty,tw,th,x-(tw/2)*face + off_x,y+mShake-th + off_y,face,1,-1,1);

if (invulnerable)
    {
    if (invulnerable_flash)
        shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
