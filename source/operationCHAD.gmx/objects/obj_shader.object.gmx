<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// look at me, i am de captain now
application_surface_draw_enable(false);

// flip flop buffers
surf_temp_a = -1;
surf_temp_b = -1;

// wavy shader uniforms
u_time = shader_get_uniform(shd_wavy,"time");
u_warp = shader_get_uniform(shd_wavy,"warp");
u_xFreq = shader_get_uniform(shd_wavy,"xFreq");
u_xAmp = shader_get_uniform(shd_wavy,"xAmp");
u_yFreq = shader_get_uniform(shd_wavy,"yFreq");
u_yAmp = shader_get_uniform(shd_wavy,"yAmp");

// crt shader uniforms
u_scan = shader_get_uniform(shd_crt,"scan");
u_curve = shader_get_uniform(shd_crt,"curve");

// wavy shader variables
warp = 0;
x_freq = 0.75;
x_amp = 0.02*2;
y_freq = 1.95;
y_amp = 0.02*5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// WE GOTTA TAKE THE POWER BACK
application_surface_draw_enable(true);

// free up surfaces
if (surface_exists(surf_temp_a))
    surface_free(surf_temp_a);
if (surface_exists(surf_temp_b))
    surface_free(surf_temp_b);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(surf_temp_a))
    surf_temp_a = surface_create(400,240);
if (!surface_exists(surf_temp_b))
    surf_temp_b = surface_create(400,240);

var last;

surface_set_target(surf_temp_a);
draw_clear(background_color);
draw_surface(application_surface,0,0);
surface_reset_target();
last = surf_temp_a;

surface_set_target(surf_temp_b);
draw_clear(background_color);
shader_set(shd_wavy);
shader_set_uniform_f(u_time,get_timer()/1000000);
shader_set_uniform_f(u_warp,warp);
shader_set_uniform_f(u_xFreq,x_freq);
shader_set_uniform_f(u_xAmp,x_amp);
shader_set_uniform_f(u_yFreq,y_freq);
shader_set_uniform_f(u_yAmp,y_amp);
draw_surface(surf_temp_a,0,0);
shader_reset();
surface_reset_target();
last = surf_temp_b;

if (room == tong_room) and (rectangle_in_rectangle(20,20,220,220,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]))
    {
    var surf_temp_c = surface_create(200,200);
    surface_set_target(surf_temp_c);
    draw_clear($000000);
    draw_surface_part(last,20-view_xview[0],20-view_yview[0],200,200,0,0);
    surface_reset_target();
    
    draw_surface(last,0,0);
    draw_set_color($342444);
    draw_rectangle(20,20,220,220,0);
    shader_set(shd_crt);
    shader_set_uniform_f(u_curve,0.5);
    shader_set_uniform_f(u_scan,0.5);
    draw_surface(surf_temp_c,20,20);
    shader_reset();
    
    surface_free(surf_temp_c);
    }
else
    {
    shader_set(shd_crt);
    shader_set_uniform_f(u_curve,global.curve);
    shader_set_uniform_f(u_scan,global.scan);
    draw_surface(last,0,0);
    shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
