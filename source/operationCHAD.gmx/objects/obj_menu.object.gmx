<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_color = global.DARKpurple;

// init settings
settings_init();
// load settings if they exist or save them if they don't
settings_path = working_directory+"settings.ini";
if (file_exists(settings_path))
    settings_load(settings_path);
settings_save(settings_path);

// view/window/gui
view_xview[0] = 0;
view_yview[0] = 0;
view_wview[0] = 400;
view_hview[0] = 240;
if (global.fullscreen)
    window_set_fullscreen(true);
else
    {
    window_set_size(view_wview[0]*2,view_hview[0]*2);
    window_set_position(display_get_width()/2-view_wview[0],display_get_height()/2-view_hview[0]);
    }
surface_resize(application_surface,view_wview[0],view_hview[0]);
display_set_gui_size(view_wview[0],view_hview[0]);

// gamepad
gamepad_init();

// globals
global.pause = false;
global.w_amp = 0; // 4;
global.w_freq = 0; // 2;
global.xnudge = 0;
global.ynudge = 0;
global.xshake = 0;
global.yshake = 0;

// create shader controller
if (!instance_exists(obj_shader))
    instance_create(0,0,obj_shader);

menu = 0;
select = 0;
selectx = 0;
selecty = 0;
rebind = false;

bg_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_update();

switch(menu)
    {
    case 0: // title screen
        if (keyboard_check_pressed(ord("Z")))
        or (keyboard_check_pressed(ord("X")))
        or (gamepad_check_pressed_all(gpinput.face1))
        or (gamepad_check_pressed_all(gpinput.face3))
            menu = 1;
        break;
    
    case 1: // main menu
        if (keyboard_check_pressed(ord("Z")))
        or (keyboard_check_pressed(ord("X")))
        or (gamepad_check_pressed_all(gpinput.face1))
        or (gamepad_check_pressed_all(gpinput.face3))
            {
            if (select == 0)
                room_goto_next();
            else if (select == 2)
                {
                menu = 2;
                select = 0;
                }
            }
        
        if (keyboard_check_pressed(vk_up))
        or (gamepad_check_pressed_all(gpinput.padu))
            select = max(0,select-1);
        if (keyboard_check_pressed(vk_down))
        or (gamepad_check_pressed_all(gpinput.padd))
            select = min(2,select+1);
        break;
    
    case 2: // settings
        if (keyboard_check_pressed(ord("Z")))
        or (keyboard_check_pressed(ord("X")))
        or (gamepad_check_pressed_all(gpinput.face1))
        or (gamepad_check_pressed_all(gpinput.face3))
            {
            if (select == 0)
                {
                global.fullscreen = !global.fullscreen;
                window_set_fullscreen(global.fullscreen);
                if (!global.fullscreen)
                    {
                    window_set_size(view_wview[0]*2,view_hview[0]*2);
                    window_set_position(display_get_width()/2-view_wview[0],display_get_height()/2-view_hview[0]);
                    }
                }
            else if (select == 1)
                global.crt = !global.crt;
            else if (select == 2)
                global.particles = !global.particles;
            else if (select == 3)
                {
                menu = 3;
                selectx = 0;
                selecty = 0;
                }
            else if (select == 4)
                {
                menu = 1;
                select = 0;
                
                settings_save(settings_path);
                }
            }
        
        if (keyboard_check_pressed(vk_up))
        or (gamepad_check_pressed_all(gpinput.padu))
            select = max(0,select-1);
        if (keyboard_check_pressed(vk_down))
        or (gamepad_check_pressed_all(gpinput.padd))
            select = min(4,select+1);
        break;
    
    case 3: // edit keybinds
        if (rebind)
            {
            if (selectx == 0)
                {
                var newkey = key_last();
                if (newkey &gt; -1)
                    {
                    rebind = false;
                    
                    // unbind from other existing keys
                    if (global.key_left[0] == newkey)
                        global.key_left[0] = -2;
                    if (global.key_right[0] == newkey)
                        global.key_right[0] = -2;
                    if (global.key_up[0] == newkey)
                        global.key_up[0] = -2;
                    if (global.key_down[0] == newkey)
                        global.key_down[0] = -2;
                    if (global.key_jump[0] == newkey)
                        global.key_jump[0] = -2;
                    if (global.key_fire[0] == newkey)
                        global.key_fire[0] = -2;
                    if (global.key_lock[0] == newkey)
                        global.key_lock[0] = -2;
                    
                    // bind to new key
                    if (selecty == 0)
                        global.key_left[0] = newkey;
                    else if (selecty == 1)
                        global.key_right[0] = newkey;
                    else if (selecty == 2)
                        global.key_up[0] = newkey;
                    else if (selecty == 3)
                        global.key_down[0] = newkey;
                    else if (selecty == 4)
                        global.key_jump[0] = newkey;
                    else if (selecty == 5)
                        global.key_fire[0] = newkey;
                    else if (selecty == 6)
                        global.key_lock[0] = newkey;
                    }
                }
            else if (selectx == 1)
                {
                var newpad = gamepad_last(0);
                if (newpad &gt; -1)
                    {
                    rebind = false;
                    
                    // unbind from other existing keys
                    if (global.pad_left[0] == newpad)
                        global.pad_left[0] = -2;
                    if (global.pad_right[0] == newpad)
                        global.pad_right[0] = -2;
                    if (global.pad_up[0] == newpad)
                        global.pad_up[0] = -2;
                    if (global.pad_down[0] == newpad)
                        global.pad_down[0] = -2;
                    if (global.pad_jump[0] == newpad)
                        global.pad_jump[0] = -2;
                    if (global.pad_fire[0] == newpad)
                        global.pad_fire[0] = -2;
                    if (global.pad_lock[0] == newpad)
                        global.pad_lock[0] = -2;
                    
                    // bind to new key
                    if (selecty == 0)
                        global.pad_left[0] = newpad;
                    else if (selecty == 1)
                        global.pad_right[0] = newpad;
                    else if (selecty == 2)
                        global.pad_up[0] = newpad;
                    else if (selecty == 3)
                        global.pad_down[0] = newpad;
                    else if (selecty == 4)
                        global.pad_jump[0] = newpad;
                    else if (selecty == 5)
                        global.pad_fire[0] = newpad;
                    else if (selecty == 6)
                        global.pad_lock[0] = newpad;
                    }
                }
            }
        else
            {
            if (keyboard_check_pressed(ord("Z")))
            or (keyboard_check_pressed(ord("X")))
            or (gamepad_check_pressed_all(gpinput.face1))
            or (gamepad_check_pressed_all(gpinput.face3))
                {
                if (selecty &lt;= 6)
                    {
                    rebind = true;
                    if (selectx == 0)
                        {
                        if (selecty == 0)
                            global.key_left[0] = -1;
                        else if (selecty == 1)
                            global.key_right[0] = -1;
                        else if (selecty == 2)
                            global.key_up[0] = -1;
                        else if (selecty == 3)
                            global.key_down[0] = -1;
                        else if (selecty == 4)
                            global.key_jump[0] = -1;
                        else if (selecty == 5)
                            global.key_fire[0] = -1;
                        else if (selecty == 6)
                            global.key_lock[0] = -1;
                        }
                    else if (selectx == 1)
                        {
                        if (selecty == 0)
                            global.pad_left[0] = -1;
                        else if (selecty == 1)
                            global.pad_right[0] = -1;
                        else if (selecty == 2)
                            global.pad_up[0] = -1;
                        else if (selecty == 3)
                            global.pad_down[0] = -1;
                        else if (selecty == 4)
                            global.pad_jump[0] = -1;
                        else if (selecty == 5)
                            global.pad_fire[0] = -1;
                        else if (selecty == 6)
                            global.pad_lock[0] = -1;
                        }
                    }
                else
                    {
                    if (selectx == 0)
                        {
                        var ready = true;
                        if (global.key_up[0] &lt; 0)
                        or (global.key_down[0] &lt; 0)
                        or (global.key_left[0] &lt; 0)
                        or (global.key_right[0] &lt; 0)
                        or (global.key_jump[0] &lt; 0)
                        or (global.key_fire[0] &lt; 0)
                        or (global.key_lock[0] &lt; 0)
                        or (global.pad_up[0] &lt; 0)
                        or (global.pad_down[0] &lt; 0)
                        or (global.pad_left[0] &lt; 0)
                        or (global.pad_right[0] &lt; 0)
                        or (global.pad_jump[0] &lt; 0)
                        or (global.pad_fire[0] &lt; 0)
                        or (global.pad_lock[0] &lt; 0)
                            ready = false;
                        
                        // return to settings menu
                        if (ready)
                            {
                            menu = 2;
                            select = 0;
                            }
                        }
                    else if (selectx == 1)
                        global.btnstyle = !global.btnstyle;
                    }
                }
            if (keyboard_check_pressed(vk_left))
            or (gamepad_check_pressed_all(gpinput.padl))
                selectx = max(0,selectx-1);
            if (keyboard_check_pressed(vk_right))
            or (gamepad_check_pressed_all(gpinput.padr))
                selectx = min(selectx+1,1);
            if (keyboard_check_pressed(vk_up))
            or (gamepad_check_pressed_all(gpinput.padu))
                selecty = max(0,selecty-1);
            if (keyboard_check_pressed(vk_down))
            or (gamepad_check_pressed_all(gpinput.padd))
                selecty = min(selecty+1,7);
            }
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var alpha = round(bg_alpha*5)/5;
draw_background_ext(title_BG,0,0,1,1,0,-1,alpha);

switch(menu)
    {
    case 0: // title screen
        draw_set_halign(1);
        draw_set_valign(1);
        if (sin(current_time/200) &gt; 0)
            {
            if (sin(current_time/400) &gt; 0)
                draw_text_outline(view_wview[0]/2,200,"Z or X to Start!");
            else
                {
                draw_text_outline(view_wview[0]/2,200," -  or  - to Start!");
                if (global.btnstyle)
                    {
                    draw_sprite(spr_buttons_xbox,0,view_wview[0]/2-64,202);
                    draw_sprite(spr_buttons_xbox,2,view_wview[0]/2-18,202);
                    }
                else
                    {
                    draw_sprite(spr_buttons_ps,0,view_wview[0]/2-64,202);
                    draw_sprite(spr_buttons_ps,2,view_wview[0]/2-18,202);
                    }
                }
            }
                    
        draw_set_halign(0);
        draw_set_valign(0);
        break;
    
    case 1: // main menu
        draw_text_outline(60,120+00,"1 PLAYER START");
        draw_text_outline(60,120+20,"2 PLAYER START");
        draw_text_outline(60,120+40,"OPTIONS");
        
        draw_sprite(spr_camera_arrow,1,32,126+select*20);
        break;
    
    case 2: // settings
        var i = 0;
        draw_text_outline(60,64+i++*18,"FULLSCREEN: "+val_to_text(0,global.fullscreen));
        draw_text_outline(60,64+i++*18,"CRT SHADER: "+val_to_text(0,global.crt));
        draw_text_outline(60,64+i++*18,"PARTICLES: "+val_to_text(0,global.particles));
        draw_text_outline(60,64+i++*18,"CONTROLS");
        
        draw_text_outline(60,202,"BACK");
        
        if (select &lt;= 3)
            draw_sprite(spr_camera_arrow,1,40,72+select*18);
        else
            draw_sprite(spr_camera_arrow,1,40,210);
        break;
    
    case 3: // edit keybinds
        var i = 0;
        draw_text_outline(60,38,"ACTION");
        draw_text_outline(60,64+i++*18,"LEFT");
        draw_text_outline(60,64+i++*18,"RIGHT");
        draw_text_outline(60,64+i++*18,"UP");
        draw_text_outline(60,64+i++*18,"DOWN");
        draw_text_outline(60,64+i++*18,"JUMP");
        draw_text_outline(60,64+i++*18,"FIRE");
        draw_text_outline(60,64+i++*18,"LOCK");
        
        var i = 0;
        draw_text_outline(160,38,"KEYBOARD");
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_left[0])));
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_right[0])));
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_up[0])));
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_down[0])));
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_jump[0])));
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_fire[0])));
        draw_text_outline(160,64+i++*18,string(key_to_text(global.key_lock[0])));
        
        if (global.btnstyle)
            var btnspr = spr_buttons_xbox;
        else
            var btnspr = spr_buttons_ps;
        
        var i = 0;
        draw_text_outline(284,38,"GAMEPAD");
        draw_sprite(btnspr,pad_to_sprite(global.pad_left[0]),284,72+i++*18);
        draw_sprite(btnspr,pad_to_sprite(global.pad_right[0]),284,72+i++*18)
        draw_sprite(btnspr,pad_to_sprite(global.pad_up[0]),284,72+i++*18);
        draw_sprite(btnspr,pad_to_sprite(global.pad_down[0]),284,72+i++*18);
        draw_sprite(btnspr,pad_to_sprite(global.pad_jump[0]),284,72+i++*18);
        draw_sprite(btnspr,pad_to_sprite(global.pad_fire[0]),284,72+i++*18);
        draw_sprite(btnspr,pad_to_sprite(global.pad_lock[0]),284,72+i++*18);
        
        draw_text_outline(110,202,"BACK");
        draw_text_outline(220,202,"TOGGLE STYLE");
        
        if (selecty &lt;= 6)
            draw_sprite(spr_camera_arrow,1-rebind,140+selectx*124,72+selecty*18);
        else
            draw_sprite(spr_camera_arrow,1,90+selectx*110,210);
        break;
    }

draw_set_color($000000);

if (menu &gt; 0)
    bg_alpha = max(0.25,bg_alpha-0.05);
else
    bg_alpha = min(1.00,bg_alpha+0.05);

/*
var sx = sign(view_xview[0]);
var x1 = view_xview[0] - round(abs(view_xview[0]*0.02) mod view_wview[0])*sx;
var x2 = view_xview[0] - round(abs(view_xview[0]*0.25) mod view_wview[0])*sx;
var x3 = view_xview[0] - round(abs(view_xview[0]*1.25) mod view_wview[0])*sx;

// bg
for(var i=0; i&lt;2; i++;)
    draw_background(NPC_BG,x1 + view_wview[0]*i,view_yview[0]);
for(var i=0; i&lt;2; i++;)
    draw_background(NPC_pillars_BG,x2 + view_wview[0]*i,view_yview[0]);

shader_set(shd_grayscale);
// fg
for(var i=0; i&lt;2; i++;)
    {
    draw_background(NPC_foreground_top,x3 + view_wview[0]*i,round(bg_heady));
    draw_background(NPC_foreground_bot,x3 + view_wview[0]*i,view_yview[0]+view_hview[0]-80-round(bg_heady));
    }
shader_reset();
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
