<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// view/window/gui
view_xview[0] = 0;
view_yview[0] = 0;
view_wview[0] = 400;
view_hview[0] = 240;

// background
background_color = global.DARKpurple;

// init settings
config_init();
// load settings if they exist or save them if they don't
config_load();
config_save();
config_action(config.fullscreen);

// gamepad
gamepad_init();

// game globals
global.pause = false;
global.music = -1;
global.FODmin = 160;
global.FODmax = 256;
global.xnudge = 0;
global.ynudge = 0;
global.xshake = 0;
global.yshake = 0;

// create shader controller
if (!instance_exists(obj_shader))
    instance_create(0,0,obj_shader);

menu = 0;
menu_x = 40;
menu_y = 64;
select = 0;
select_min = 0;
select_max = 0;
select_enable = false;
selectx = 0;
selectx_min = 0;
selectx_max = 0;
selectx_enable = false;
selecty = 0;
selecty_min = 0;
selecty_max = 0;
selecty_enable = false;
rebind = false;

bg_fade = 1;
bg_full = 1;
CLOUDx = 0;
CLOUDspe = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_update();

var input_left = keyboard_check_pressed(vk_left) or gamepad_check_pressed_all(gpinput.padl);
var input_right = keyboard_check_pressed(vk_right) or gamepad_check_pressed_all(gpinput.padr);
var input_up = keyboard_check_pressed(vk_up) or gamepad_check_pressed_all(gpinput.padu);
var input_down = keyboard_check_pressed(vk_down) or gamepad_check_pressed_all(gpinput.padd);

select_enable = false;
selectx_enable = false;
selecty_enable = false;

var pressed = false;
if (keyboard_check_pressed(ord("Z")))
or (keyboard_check_pressed(ord("X")))
or (gamepad_check_pressed_all(gpinput.face1))
or (gamepad_check_pressed_all(gpinput.face3))
    pressed = true;

var menu_old = menu;

switch(menu)
    {
    case 0: // title screen
        if (pressed)
            menu = 1;
        break;
    
    case 1: // main menu
        if (pressed)
            {
            if (select == 0)
                room_goto_next();
            else if (select == 2)
                {
                menu = 2;
                select = 0;
                }
            else if (select == 3)
                menu = 7;
            }
        
        select_enable = true;
        select_max = 3;
        break;
    
    case 2: // settings
        if (pressed)
            {
            if (select == 0)
                {
                menu = 3; // video
                select = 0;
                }
            else if (select == 1)
                {
                menu = 4; // audio
                select = 0;
                }
            else if (select == 2)
                {
                menu = 5; // keyboard controls
                selectx = 0;
                selecty = 0;
                }
            else if (select == 3)
                {
                menu = 6; // gamepad controls
                selectx = 0;
                selecty = 0;
                }
            else if (select == 4) // back
                {
                menu = 1;
                select = 0;
                config_save();
                }
            }
        
        select_enable = true;
        select_max = 4;
        break;
    
    case 3: // video settings
        if (pressed)
            {
            if (select == 0)
                {
                global.CFG[config.fullscreen] = !global.CFG[config.fullscreen];
                config_action(config.fullscreen);
                }
            else if (select == 1)
                {
                global.CFG[config.windowScale]++;
                config_action(config.windowScale);
                }
            else if (select == 2) // vsync
                {
                global.CFG[config.vsync] = !global.CFG[config.vsync];
                config_action(config.vsync);
                }
            else if (select == 3)
                {
                global.CFG[config.CRTwarp] += 0.25;
                if (global.CFG[config.CRTwarp] &gt; 1)
                    global.CFG[config.CRTwarp] = 0;
                config_action(config.CRTwarp);
                }
            else if (select == 4)
                {
                global.CFG[config.CRTscan] += 0.25;
                if (global.CFG[config.CRTscan] &gt; 1)
                    global.CFG[config.CRTscan] = 0;
                config_action(config.CRTscan);
                }
            else if (select == 5)
                {
                global.CFG[config.particles] = !global.CFG[config.particles];
                config_action(config.particles);
                }
            else if (select == 6)
                {
                menu = 2;
                select = 0;
                }
            }
        
        select_enable = true;
        select_max = 6;
        break;
    
    case 4: // audio settings
        if (pressed)
            {
            if (select == 0)
                {
                global.CFG[config.BGMgain] += 0.25;
                if (global.CFG[config.BGMgain] &gt; 1)
                    global.CFG[config.BGMgain] = 0;
                }
            else if (select == 1)
                {
                global.CFG[config.SFXgain] += 0.25;
                if (global.CFG[config.SFXgain] &gt; 1)
                    global.CFG[config.SFXgain] = 0;
                }
            else if (select == 2)
                {
                menu = 2;
                select = 0;
                }
            }
        
        select_enable = true;
        select_max = 2;
        break;
    
    case 5: // keyboard controls
        if (selectx == 0)
            {
            var _start  = config.keyL1;
            var _end    = config.keySwap1;
            }
        else
            {
            var _start  = config.keyL2;
            var _end    = config.keySwap2;
            }
        
        if (rebind)
            {
            var newkey = key_last();
            if (newkey &gt; -1)
                {
                rebind = false;
                
                // resolve conflict by unbinding existing keybind
                for(var i=_start; i&lt;=_end; i++;)
                    {
                    if (global.CFG[i] == newkey)
                        global.CFG[i] = -2;
                    }
                // bind to new key
                if (selecty &gt;= 0) and (selecty &lt;= 6)
                    global.CFG[_start+selecty] = newkey;
                }
            }
        else
            {
            if (pressed)
                {
                if (selecty &gt;= 0) and (selecty &lt;= 6)
                    {
                    rebind = true;
                    // temp unset keybind
                    global.CFG[_start+selecty] = -1;
                    }
                else
                    {
                    // return to settings menu
                    var ready = true;
                    for(var i=_start; i&lt;=_end; i++;)
                        {
                        if (global.CFG[i] &lt; 0)
                            ready = false;
                        }
                    if (ready)
                        {
                        menu = 2;
                        select = 0;
                        }
                    }
                }
            
            selectx_enable = true;
            selectx_max = 1;
            selecty_enable = true;
            selecty_max = 7;
            }
        break;
    
    case 6: // gamepad controls
        if (selectx == 0)
            {
            var _start  = config.padL1;
            var _end    = config.padSwap1;
            }
        else
            {
            var _start  = config.padL2;
            var _end    = config.padSwap2;
            }
        
        if (rebind)
            {
            var newpad = gamepad_last_all();
            if (newpad &gt; -1)
                {
                rebind = false;
                // resolve conflict by unbinding existing keybind
                for(var i=_start; i&lt;=_end; i++;)
                    {
                    if (global.CFG[i] == newpad)
                        global.CFG[i] = -2;
                    }
                // bind to new key
                if (selecty &gt;= 0) and (selecty &lt;= 6)
                    global.CFG[_start+selecty] = newpad;
                }
            }
        else
            {
            if (pressed)
                {
                if (selecty &gt;= 0) and (selecty &lt;= 6)
                    {
                    rebind = true;
                    // temp unset keybind
                    global.CFG[_start+selecty] = -1;
                    }
                else
                    {
                    // return to settings menu
                    if (selectx == 0)
                        {
                        var ready = true;
                        for(var i=config.padL1; i&lt;=config.padSwap2; i++;)
                            {
                            if (global.CFG[i] &lt; 0)
                                ready = false;
                            }
                        if (ready)
                            {
                            menu = 2;
                            select = 0;
                            }
                        }
                    else if (selectx == 1)
                        global.CFG[config.padType] = !global.CFG[config.padType];
                    }
                }
            
            selectx_enable = true;
            selectx_max = 1;
            selecty_enable = true;
            selecty_max = 7;
            }
        break;
    
    case 7: // quit confirmation
        if (pressed)
            {
            if (select == 0)
                game_end();
            else if (select == 1)
                {
                menu = 1;
                select = 0;
                }
            }
        
        select_enable = true;
        select_max = 1;
        break;
    }

if (pressed)
    snd_play(snd_menu_select);
if (menu != menu_old)
    menu_x = 32;
menu_x += (40-menu_x)*0.25;

if (select_enable)
    {
    if (input_up xor input_down)
        {
        select += input_down-input_up;
        snd_play(snd_menu_hover);
        }
    if (select &lt; select_min)
        select = select_max;
    else if (select &gt; select_max)
        select = select_min;
    }
if (selectx_enable)
    {
    if (input_left xor input_right)
        {
        selectx += input_right-input_left;
        snd_play(snd_menu_hover);
        }
    if (selectx &lt; selectx_min)
        selectx = selectx_max;
    else if (selectx &gt; selectx_max)
        selectx = selectx_min;
    }
if (selecty_enable)
    {
    if (input_up xor input_down)
        {
        selecty += input_down-input_up;
        snd_play(snd_menu_hover);
        }
    if (selecty &lt; selecty_min)
        selecty = selecty_max;
    else if (selecty &gt; selecty_max)
        selecty = selecty_min;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menux = round(menu_x);
menuy = round(menu_y);
col1x = 88;
col2x = 224;

// bg art fade
var fade_s = sign((menu == 0)-bg_fade);
bg_fade = clamp(bg_fade + fade_s*0.05,0,1);
var fade_min  = round(max(0.2,bg_fade)*5)/5;
var fade_zero = round(bg_fade*5)/5;
var fade_col  = merge_color($000000,$FFFFFF,fade_min);
// draw bg art
CLOUDx += CLOUDspe;
draw_background_ext(title_BG,0,0,1,1,0,fade_col,1);
draw_background_tiled_ext(title_clouds_BG,CLOUDx,0,1,1,fade_col,1);
draw_background_ext(title_front_BG,0,0,1,1,0,-1,fade_zero);

switch(menu)
    {
    case 0: // title screen
        draw_set_color($000000);
        draw_set_alpha(0.6);
        draw_rectangle(0,view_hview[0]-24,view_wview[0],view_hview[0],0);
        draw_set_alpha(1.0);
        draw_set_halign(1);
        draw_set_valign(1);
        if (sin(current_time/200) &gt; 0)
            {
            if (sin(current_time/400) &gt; 0)
                draw_text_outline(view_wview[0]/2,view_hview[0]-13,"Z or X to Start!");
            else
                {
                draw_text_outline(view_wview[0]/2,view_hview[0]-13," -  or  - to Start!");
                if (global.CFG[config.padType])
                    {
                    draw_sprite(spr_buttons_xbox,0,view_wview[0]/2-64,view_hview[0]-12);
                    draw_sprite(spr_buttons_xbox,2,view_wview[0]/2-18,view_hview[0]-12);
                    }
                else
                    {
                    draw_sprite(spr_buttons_ps,0,view_wview[0]/2-64,view_hview[0]-12);
                    draw_sprite(spr_buttons_ps,2,view_wview[0]/2-18,view_hview[0]-12);
                    }
                }
            }
        draw_set_halign(0);
        draw_set_valign(0);
        break;
    
    case 1: // main menu
        var i = 0;
        draw_text_outline(menux,menuy+i++*18,"1P START");
        draw_text_outline(menux,menuy+i++*18,"2P START");
        draw_text_outline(menux,menuy+i++*18,"OPTIONS");
        draw_text_outline(menux,menuy+i++*18,"QUIT TO DESKTOP");
        
        draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+select*18);
        break;
    
    case 2: // settings
        var i = 0;
        draw_text_outline(menux,menuy+i++*18,"VIDEO");
        draw_text_outline(menux,menuy+i++*18,"AUDIO");
        draw_text_outline(menux,menuy+i++*18,"KEYBOARD");
        draw_text_outline(menux,menuy+i++*18,"GAMEPAD");
        draw_text_outline(menux,menuy+138,"BACK");
        
        if (select &lt;= 3)
            draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+select*18);
        else
            draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+138);
        break;
    
    case 3: // video settings
        var i = 0;
        draw_text_outline(menux,menuy+i++*18,"FULLSCREEN: "+val_to_text(0,global.CFG[config.fullscreen]));
        draw_text_outline(menux,menuy+i++*18,"WINDOW SCALE: "+string(global.CFG[config.windowScale])+"X");
        draw_text_outline(menux,menuy+i++*18,"VSYNC: "+val_to_text(0,global.CFG[config.vsync]));
        draw_text_outline(menux,menuy+i++*18,"CRT WARP: "+val_to_text(1,global.CFG[config.CRTwarp]));
        draw_text_outline(menux,menuy+i++*18,"CRT SCANLINES: "+val_to_text(1,global.CFG[config.CRTscan]));
        draw_text_outline(menux,menuy+i++*18,"PARTICLES: "+val_to_text(0,global.CFG[config.particles]));
        draw_text_outline(menux,menuy+138,"BACK");
        
        if (select &lt; 6)
            draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+select*18);
        else
            draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+138);
        break;
    
    case 4: // audio settings
        var i = 0;
        draw_text_outline(menux,menuy+i++*18,"MUSIC VOLUME: "+val_to_text(1,global.CFG[config.BGMgain]));
        draw_text_outline(menux,menuy+i++*18,"SFX VOLUME: "+val_to_text(1,global.CFG[config.SFXgain]));
        draw_text_outline(menux,menuy+138,"BACK");
        
        if (select &lt; 2)
            draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+select*18);
        else
            draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+138);
        break;
    
    case 5: // keyboard controls
        var i = 0;
        draw_text_outline(menux,menuy-24,"ACTION",$AAAAAA);
        draw_text_outline(menux,menuy+i++*18,"LEFT");
        draw_text_outline(menux,menuy+i++*18,"RIGHT");
        draw_text_outline(menux,menuy+i++*18,"UP");
        draw_text_outline(menux,menuy+i++*18,"DOWN");
        draw_text_outline(menux,menuy+i++*18,"FIRE");
        draw_text_outline(menux,menuy+i++*18,"JUMP");
        draw_text_outline(menux,menuy+i++*18,"LOCK");
        
        var i = 0;
        draw_text_outline(menux+col1x,menuy-24,"P1 KEYBOARD",$AAAAAA);
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyL1])));
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyR1])));
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyU1])));
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyD1])));
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyFire1])))
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyJump1])));
        draw_text_outline(menux+col1x,menuy+i++*18,string(key_to_text(global.CFG[config.keyLock1])));
        
        var i = 0;
        draw_text_outline(menux+col2x,menuy-24,"P2 KEYBOARD",$AAAAAA);
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyL2])));
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyR2])));
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyU2])));
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyD2])));
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyFire2])))
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyJump2])));
        draw_text_outline(menux+col2x,menuy+i++*18,string(key_to_text(global.CFG[config.keyLock2])));
        
        draw_text_outline(menux+col1x,menuy+138,"BACK");
        
        if (selecty &lt; 7)
            draw_sprite(spr_camera_arrow,1-rebind,menux+col1x-20+selectx*(col2x-col1x),menuy+8+selecty*18);
        else
            draw_sprite(spr_camera_arrow,1,menux+col1x-20,menuy+8+138);
        break;
    
    case 6: // gamepad controls
        var i = 0;
        draw_text_outline(menux,menuy-24,"ACTION",$AAAAAA);
        draw_text_outline(menux,menuy+i++*18,"LEFT");
        draw_text_outline(menux,menuy+i++*18,"RIGHT");
        draw_text_outline(menux,menuy+i++*18,"UP");
        draw_text_outline(menux,menuy+i++*18,"DOWN");
        draw_text_outline(menux,menuy+i++*18,"FIRE");
        draw_text_outline(menux,menuy+i++*18,"JUMP");
        draw_text_outline(menux,menuy+i++*18,"LOCK");
        
        if (global.CFG[config.padType])
            var pad_spr = spr_buttons_xbox;
        else
            var pad_spr = spr_buttons_ps;
        
        var i = 0;
        draw_text_outline(menux+col1x,menuy-24,"P1 GAMEPAD",$AAAAAA);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padL1]),menux+col1x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padR1]),menux+col1x,menuy+8+i++*18)
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padU1]),menux+col1x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padD1]),menux+col1x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padFire1]),menux+col1x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padJump1]),menux+col1x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padLock1]),menux+col1x,menuy+8+i++*18);
        
        var i = 0;
        draw_text_outline(menux+col2x,menuy-24,"P2 GAMEPAD",$AAAAAA);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padL2]),menux+col2x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padR2]),menux+col2x,menuy+8+i++*18)
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padU2]),menux+col2x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padD2]),menux+col2x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padFire2]),menux+col2x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padJump2]),menux+col2x,menuy+8+i++*18);
        draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padLock2]),menux+col2x,menuy+8+i++*18);
        
        draw_text_outline(menux+col1x,menuy+138,"BACK");
        draw_text_outline(menux+col2x,menuy+138,"TOGGLE STYLE");
        
        if (selecty &lt; 7)
            draw_sprite(spr_camera_arrow,1-rebind,menux+col1x-20+selectx*(col2x-col1x),menuy+8+selecty*18);
        else
            draw_sprite(spr_camera_arrow,1,menux+col1x-20+selectx*(col2x-col1x),menuy+8+138);
        break;
    
    case 7: // quit confirmation
        var i = 0;
        draw_text_outline(menux,menuy+i++*18,"QUIT");
        draw_text_outline(menux,menuy+i++*18,"BACK");
        
        draw_sprite(spr_camera_arrow,1,menux-20,menuy+8+select*18);
        break;
    }

draw_set_color($000000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
