<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// view/display/gui setup
view_wview[0] = 400;
view_hview[0] = 240;
window_set_fullscreen(true);
//window_set_size(view_wview[0]*2,view_hview[0]*2);
//window_set_position(display_get_width()/2-view_wview[0],display_get_height()/2-view_hview[0]);
surface_resize(application_surface,view_wview[0],view_hview[0]);
gui_w = view_wview[0];
gui_h = view_hview[0];
display_set_gui_size(gui_w,gui_h);

draw_set_font(fnt_default);

global.crt = false;
global.particles = true;
global.pause = false;
global.xshake = 0;
global.yshake = 0;

instance_create(0,0,obj_shader);

// gamepad
gamepad_init();

// key binds
global.key_up[0] = vk_up;
global.key_down[0] = vk_down;
global.key_left[0] = vk_left;
global.key_right[0] = vk_right;
global.key_fire[0] = ord("Z");
global.key_jump[0] = ord("X");

global.pad_up[0] = gp_padu;
global.pad_down[0] = gp_padd;
global.pad_left[0] = gp_padl;
global.pad_right[0] = gp_padr;
global.pad_fire[0] = gp_face3;
global.pad_jump[0] = gp_face1;

bg_alpha = 0;
bg_heady = -80;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_update();

view_xview[0] += 1;

bg_alpha += (0.4-bg_alpha)*0.05;
bg_heady += (0-bg_heady)*0.05;

if (keyboard_check_pressed(ord("Z")))
or (keyboard_check_pressed(ord("X")))
    room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color($000000);
draw_set_alpha(bg_alpha);
draw_rectangle(0,0,view_wview[0],view_hview[0],0);
draw_set_alpha(1.0);

draw_set_halign(1);
draw_set_valign(1);
draw_text_outline(view_wview[0]/2,60,"Operation C.H.A.D.");
if (sin(current_time/200) &gt; 0)
    draw_text_outline(view_wview[0]/2,180,"Z or X to Start!");
draw_set_halign(0);
draw_set_valign(0);

draw_set_color($000000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sx = sign(view_xview[0]);
var x1 = view_xview[0] - round(abs(view_xview[0]*0.02) mod view_wview[0])*sx;
var x2 = view_xview[0] - round(abs(view_xview[0]*0.25) mod view_wview[0])*sx;
var x3 = view_xview[0] - round(abs(view_xview[0]*1.25) mod view_wview[0])*sx;

// bg
for(var i=0; i&lt;2; i++;)
    draw_background(NPC_BG,x1 + view_wview[0]*i,view_yview[0]);
for(var i=0; i&lt;2; i++;)
    draw_background(NPC_pillars_BG,x2 + view_wview[0]*i,view_yview[0]);

shader_set(shd_grayscale);
// fg
for(var i=0; i&lt;2; i++;)
    {
    draw_background(NPC_foreground_top,x3 + view_wview[0]*i,round(bg_heady));
    draw_background(NPC_foreground_bot,x3 + view_wview[0]*i,view_yview[0]+view_hview[0]-80-round(bg_heady));
    }
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
