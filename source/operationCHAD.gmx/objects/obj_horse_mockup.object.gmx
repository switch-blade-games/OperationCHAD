<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum uni
    {
    body, // body
    neck, // neck
    head, // head
    leg_ftf, // leg front top [FRONT]
    leg_fbf, // leg front bottom [FRONT]
    hoof_ff, // hoof front [FRONT]
    leg_rtf, // leg rear top [FRONT]
    leg_rbf, // leg rear bottom [FRONT]
    hoof_rf, // hoof rear [FRONT]
    leg_ftb, // leg front top [BACK]
    leg_fbb, // leg front bottom [BACK]
    hoof_fb, // hoof front [BACK]
    leg_rtb, // leg rear top [BACK]
    leg_rbb, // leg rear bottom [BACK]
    hoof_rb, // hoof rear [BACK]
    tail, // tail
    parts // how many body parts
    }

partname[uni.body] = "body";
partname[uni.neck] = "neck";
partname[uni.head] = "head";
partname[uni.leg_ftf] = "leg_ftf";
partname[uni.leg_fbf] = "leg_fbf";
partname[uni.hoof_ff] = "hoof_ff";
partname[uni.leg_rtf] = "leg_rtf";
partname[uni.leg_rbf] = "leg_rbf";
partname[uni.hoof_rf] = "hoof_rf";
partname[uni.leg_ftb] = "leg_ftb";
partname[uni.leg_fbb] = "leg_fbb";
partname[uni.hoof_fb] = "hoof_fb";
partname[uni.leg_rtb] = "leg_rtb";
partname[uni.leg_rbb] = "leg_rbb";
partname[uni.hoof_rb] = "hoof_rb";
partname[uni.tail] = "tail";

// body part sprites
sprite[uni.body] = spr_unicorn_body;
sprite[uni.neck] = spr_unicorn_neck;
sprite[uni.head] = spr_unicorn_head;
sprite[uni.leg_ftf] = spr_unicorn_leg_ft;
sprite[uni.leg_fbf] = spr_unicorn_leg_fb;
sprite[uni.hoof_ff] = spr_unicorn_hoof;
sprite[uni.leg_rtf] = spr_unicorn_leg_bt;
sprite[uni.leg_rbf] = spr_unicorn_leg_bb;
sprite[uni.hoof_rf] = spr_unicorn_hoof;
sprite[uni.leg_ftb] = spr_unicorn_leg_ft;
sprite[uni.leg_fbb] = spr_unicorn_leg_fb;
sprite[uni.hoof_fb] = spr_unicorn_hoof;
sprite[uni.leg_rtb] = spr_unicorn_leg_bt;
sprite[uni.leg_rbb] = spr_unicorn_leg_bb;
sprite[uni.hoof_rb] = spr_unicorn_hoof;
sprite[uni.tail] = spr_unicorn_tail;

// body
off_x[uni.body] = 0;
off_y[uni.body] = 0;
// neck and head
off_x[uni.neck] = +48;
off_y[uni.neck] = -12;
off_x[uni.head] = +36;
off_y[uni.head] = -41;
// leg front FRONT
off_x[uni.leg_ftf] = +50;
off_y[uni.leg_ftf] = +21;
off_x[uni.leg_fbf] = +3;
off_y[uni.leg_fbf] = +31;
off_x[uni.hoof_ff] = -2;
off_y[uni.hoof_ff] = +25;
// leg rear FRONT
off_x[uni.leg_rtf] = -40;
off_y[uni.leg_rtf] = +12;
off_x[uni.leg_rbf] = -24;
off_y[uni.leg_rbf] = +45;
off_x[uni.hoof_rf] = -2;
off_y[uni.hoof_rf] = +25;
// leg front BACK
off_x[uni.leg_ftb] = +56;
off_y[uni.leg_ftb] = +19;
off_x[uni.leg_fbb] = +3;
off_y[uni.leg_fbb] = +31;
off_x[uni.hoof_fb] = -2;
off_y[uni.hoof_fb] = +25;
// leg rear BACK
off_x[uni.leg_rtb] = -34;
off_y[uni.leg_rtb] = +10;
off_x[uni.leg_rbb] = -24;
off_y[uni.leg_rbb] = +45;
off_x[uni.hoof_rb] = -2;
off_y[uni.hoof_rb] = +25;
// tail
off_x[uni.tail] = -60;
off_y[uni.tail] = -18;

for(var i=0; i&lt;uni.parts; i++;)
    {
    parent[i] = -1;
    part_x[i] = 0;
    part_y[i] = 0;
    part_a[i] = 0;
    
    off_dir[i] = point_direction(0,0,off_x[i],off_y[i]);
    off_dis[i] = point_distance(0,0,off_x[i],off_y[i]);
    }

parent[uni.body] = -1;
parent[uni.neck] = uni.body;
parent[uni.head] = uni.neck;
parent[uni.leg_ftf] = uni.body;
parent[uni.leg_fbf] = uni.leg_ftf;
parent[uni.hoof_ff] = uni.leg_fbf;
parent[uni.leg_rtf] = uni.body;
parent[uni.leg_rbf] = uni.leg_rtf;
parent[uni.hoof_rf] = uni.leg_rbf;
parent[uni.leg_ftb] = uni.body;
parent[uni.leg_fbb] = uni.leg_ftb;
parent[uni.hoof_fb] = uni.leg_fbb;
parent[uni.leg_rtb] = uni.body;
parent[uni.leg_rbb] = uni.leg_rtb;
parent[uni.hoof_rb] = uni.leg_rbb;
parent[uni.tail] = uni.body;

for(var i=1; i&lt;uni.parts; i++;)
    {
    var xpos = part_x[parent[i]];
    var ypos = part_y[parent[i]];
    var ang = part_a[parent[i]];
    
    part_x[i] = xpos+lengthdir_x(off_dis[i],ang+off_dir[i]);
    part_y[i] = ypos+lengthdir_y(off_dis[i],ang+off_dir[i]);
    part_a[i] = ang;
    }

time = 0;
timestep = 0.2;
edit = true;

keyframes = 1;
keyselect = 0;
partselect = 0;
parthover = -1;

keyframe_x[0] = 0;
keyframe_y[0] = 0;
for(var i=0; i&lt;uni.parts; i++;)
    keyframe_a[0,i] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_control))
    {
    if (edit)
        {
        if (keyboard_check_pressed(ord("S")))
            {
            var path = get_save_filename("Spine Files|*.spine","");
            if (path == "")
                exit;
            
            var buff = buffer_create(4096,buffer_grow,1);
            buffer_seek(buff,buffer_seek_start,0);
            
            buffer_write(buff,buffer_u8,keyframes);
            
            for(var i=0; i&lt;keyframes; i++;)
                {
                buffer_write(buff,buffer_s16,keyframe_x[i]);
                buffer_write(buff,buffer_s16,keyframe_y[i]);
                
                for(var j=0; j&lt;uni.parts; j++;)
                    buffer_write(buff,buffer_s16,keyframe_a[i,j]);
                }
            
            var bytes = buffer_tell(buff);
            
            buffer_save_ext(buff,path,0,bytes);
            buffer_delete(buff);
            }
        else if (keyboard_check_pressed(ord("L")))
            {
            var path = get_open_filename("Spine Files|*.spine","");
            if (path == "") or (!file_exists(path))
                exit;
            
            var buff = buffer_load(path);
            buffer_seek(buff,buffer_seek_start,0);
            
            keyframes = buffer_read(buff,buffer_u8);
            
            for(var i=0; i&lt;keyframes; i++;)
                {
                keyframe_x[i] = buffer_read(buff,buffer_s16);
                keyframe_y[i] = buffer_read(buff,buffer_s16);
                
                for(var j=0; j&lt;uni.parts; j++;)
                    keyframe_a[i,j] = buffer_read(buff,buffer_s16);
                }
            
            buffer_delete(buff);
            }
        }
    exit;
    }

if (keyboard_check_pressed(vk_space))
    edit = !edit;
if (edit)
    {
    if (keyboard_check_pressed(vk_up))
        {
        for(var i=keyframes; i&gt;=keyselect+1; i--;)
            {
            keyframe_x[i] = keyframe_x[i-1];
            keyframe_y[i] = keyframe_y[i-1];
            for(var j=0; j&lt;uni.parts; j++;)
                keyframe_a[i,j] = keyframe_a[i-1,j];
            }
        keyframes++;
        keyselect++;
        }
    if (keyboard_check_pressed(vk_down)) and (keyframes &gt; 1)
        {
        for(var i=keyselect; i&lt;keyframes-1; i++;)
            {
            keyframe_x[i] = keyframe_x[i+1];
            keyframe_y[i] = keyframe_y[i+1];
            for(var j=0; j&lt;uni.parts; j++;)
                keyframe_a[i,j] = keyframe_a[i+1,j];
            }
        keyframes--;
        keyselect--;
        }
    if (keyboard_check_pressed(vk_left))
        {
        keyselect--;
        if (keyselect &lt; 0)
            keyselect = max(0,keyframes-1);
        }
    if (keyboard_check_pressed(vk_right))
        {
        keyselect++;
        if (keyselect &gt; keyframes-1)
            keyselect = 0;
        }
    
    var xadjust = (keyboard_check(ord("D"))-keyboard_check(ord("A")))*(1 + 3*keyboard_check(vk_shift));
    var yadjust = (keyboard_check(ord("S"))-keyboard_check(ord("W")))*(1 + 3*keyboard_check(vk_shift));
    var aadjust = (keyboard_check(ord("Q"))-keyboard_check(ord("E")))*(1 + 3*keyboard_check(vk_shift));
    if (partselect == uni.body)
        {
        keyframe_x[keyselect] += xadjust;
        keyframe_y[keyselect] += yadjust;
        keyframe_a[keyselect,partselect] += aadjust;
        }
    else
        {
        keyframe_a[keyselect,partselect] += aadjust;
        }
    
    part_x[uni.body] = keyframe_x[keyselect];
    part_y[uni.body] = keyframe_y[keyselect];
    part_a[uni.body] = keyframe_a[keyselect,uni.body];
    
    for(var i=1; i&lt;uni.parts; i++;)
        {
        var xpos = part_x[parent[i]];
        var ypos = part_y[parent[i]];
        var ang = part_a[parent[i]];
        
        part_x[i] = xpos+lengthdir_x(off_dis[i],ang+off_dir[i]);
        part_y[i] = ypos+lengthdir_y(off_dis[i],ang+off_dir[i]);
        part_a[i] = ang+keyframe_a[keyselect,i];
        }
    
    var dis;
    for(var i=0; i&lt;uni.parts; i++;)
        dis[i] = point_distance(mouse_x,mouse_y,part_x[i],part_y[i]);
    
    dismin = 64;
    parthover = -1;
    for(var i=0; i&lt;uni.parts; i++;)
        {
        if (dis[i] &lt; dismin)
            {
            dismin = dis[i];
            parthover = i;
            if (mouse_check_button_pressed(mb_left))
                partselect = i;
            }
        }
    }
else
    {
    time += timestep;
    if (time &gt;= keyframes)
        time = max(0,time-keyframes);
    
    if (keyframes &gt; 1)
        {
        var lerpval = frac(time);
        var curkey = floor(time);
        if (curkey == keyframes-1)
            var nxtkey = 0;
        else
            var nxtkey = floor(time)+1;
        
        part_x[uni.body] = lerp(keyframe_x[curkey],keyframe_x[nxtkey],lerpval);
        part_y[uni.body] = lerp(keyframe_y[curkey],keyframe_y[nxtkey],lerpval);
        part_a[uni.body] = lerp(keyframe_a[curkey,uni.body],keyframe_a[nxtkey,uni.body],lerpval);
        
        for(var i=1; i&lt;uni.parts; i++;)
            {
            var xpos = part_x[parent[i]];
            var ypos = part_y[parent[i]];
            var ang = part_a[parent[i]];
            
            part_x[i] = xpos+lengthdir_x(off_dis[i],ang+off_dir[i]);
            part_y[i] = ypos+lengthdir_y(off_dis[i],ang+off_dir[i]);
            part_a[i] = ang+lerp(keyframe_a[curkey,i],keyframe_a[nxtkey,i],lerpval);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color($000000);
if (edit)
    {
    draw_text(6,6+14*0,"EDIT MODE (SPACE TO PREVIEW)");
    draw_text(6,6+14*1,"KEYFRAME: "+string(keyselect+1)+"/"+string(keyframes));
    draw_text(6,6+14*2,"BODY PART: "+string(partname[partselect]));
    draw_text(6,6+14*3,"[WASD] to MOVE - [QE] to ROTATE");
    draw_text(6,6+14*4,"[LEFT/RIGHT] to SELECT keyframe");
    draw_text(6,6+14*5,"[UP/DOWN] to ADD/REMOVE keyframes");
    draw_text(6,6+14*6,"[CTRL]+[S/L] to SAVE/LOAD");
    }
else
    {
    draw_text(6,6+14*0,"PREVIEW MODE (SPACE TO EDIT)");
    draw_text(6,6+14*1,"KEYFRAME: "+string(floor(time))+"/"+string(keyframes));
    }

// back legs/hoofs
draw_sprite_ext(sprite[uni.hoof_rb],0,x+part_x[uni.hoof_rb],y+part_y[uni.hoof_rb],1,1,part_a[uni.hoof_rb],c_gray,1);
draw_sprite_ext(sprite[uni.hoof_fb],0,x+part_x[uni.hoof_fb],y+part_y[uni.hoof_fb],1,1,part_a[uni.hoof_fb],c_gray,1);
draw_sprite_ext(sprite[uni.leg_rtb],0,x+part_x[uni.leg_rtb],y+part_y[uni.leg_rtb],1,1,part_a[uni.leg_rtb],c_gray,1);
draw_sprite_ext(sprite[uni.leg_ftb],0,x+part_x[uni.leg_ftb],y+part_y[uni.leg_ftb],1,1,part_a[uni.leg_ftb],c_gray,1);
draw_sprite_ext(sprite[uni.leg_rbb],0,x+part_x[uni.leg_rbb],y+part_y[uni.leg_rbb],1,1,part_a[uni.leg_rbb],c_gray,1);
draw_sprite_ext(sprite[uni.leg_fbb],0,x+part_x[uni.leg_fbb],y+part_y[uni.leg_fbb],1,1,part_a[uni.leg_fbb],c_gray,1);
// neck
draw_sprite_ext(sprite[uni.neck],0,x+part_x[uni.neck],y+part_y[uni.neck],1,1,part_a[uni.neck],-1,1);
// body
draw_sprite_ext(sprite[uni.body],0,x+part_x[uni.body],y+part_y[uni.body],1,1,part_a[uni.body],-1,1);
// head
draw_sprite_ext(sprite[uni.head],0,x+part_x[uni.head],y+part_y[uni.head],1,1,part_a[uni.head],-1,1);
// tail
draw_sprite_ext(sprite[uni.tail],0,x+part_x[uni.tail],y+part_y[uni.tail],1,1,part_a[uni.tail],-1,1);
// front legs/hoofs
draw_sprite_ext(sprite[uni.hoof_rf],0,x+part_x[uni.hoof_rf],y+part_y[uni.hoof_rf],1,1,part_a[uni.hoof_rf],-1,1);
draw_sprite_ext(sprite[uni.hoof_ff],0,x+part_x[uni.hoof_ff],y+part_y[uni.hoof_ff],1,1,part_a[uni.hoof_ff],-1,1);
draw_sprite_ext(sprite[uni.leg_rtf],0,x+part_x[uni.leg_rtf],y+part_y[uni.leg_rtf],1,1,part_a[uni.leg_rtf],-1,1);
draw_sprite_ext(sprite[uni.leg_ftf],0,x+part_x[uni.leg_ftf],y+part_y[uni.leg_ftf],1,1,part_a[uni.leg_ftf],-1,1);
draw_sprite_ext(sprite[uni.leg_rbf],0,x+part_x[uni.leg_rbf],y+part_y[uni.leg_rbf],1,1,part_a[uni.leg_rbf],-1,1);
draw_sprite_ext(sprite[uni.leg_fbf],0,x+part_x[uni.leg_fbf],y+part_y[uni.leg_fbf],1,1,part_a[uni.leg_fbf],-1,1);

if (edit)
    {
    if (parthover &gt; -1)
        draw_sprite_ext(sprite[parthover],0,x+part_x[parthover],y+part_y[parthover],1,1,part_a[parthover],c_fuchsia,0.5);
    if (partselect &gt; -1)
        draw_sprite_ext(sprite[partselect],0,x+part_x[partselect],y+part_y[partselect],1,1,part_a[partselect],c_fuchsia,0.8);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
