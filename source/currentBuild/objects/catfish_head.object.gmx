<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>catfish_body_1_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0,catfish_surface)

LAPmax=3

LAPS=0


EGGshots=4

HARMplayer=false


enemy_init(2000)

MYpath=path_add()

path_set_closed(MYpath,false)

LENmax=50

SEGS=6



//create segments
var i=0;


var ME=id;

repeat(SEGS){

    BOD[i]=instance_create(x,y,catfish_seg)
    
    with(BOD[i]){
        event_perform(ev_create,0)
        dad=ME
        
        MYdepth=i
    }
    
    //the order of these are reversed
    
    
    //tail
    if(i=0)
    BOD[i].sprite_index=catfish_body_5_spr
    
    
    
    if(i=1)
    BOD[i].sprite_index=catfish_body_4_spr
    
    if(i=2)
    BOD[i].sprite_index=catfish_body_3_spr
    
    //2 is done twice
    if(i=3)
    BOD[i].sprite_index=catfish_body_2_spr
    
    if(i=4)
    BOD[i].sprite_index=catfish_body_2_spr
    
    //
    
    if(i=5)
    BOD[i].sprite_index=catfish_body_1_spr
    
    
    
    
    
    i+=1
}



//variables that desl with swiming



SWIM=1

state=SWIM


SWIMup=1
SWIMdown=2

SWIMstate=SWIMup


SWIMvspe=5
SWIMvgrav=0.4

SWIMhspe=2.3

//this is the y axis that flips the fish from swiming up to down/ ie the fish swims on this y
SWIMybase=y



///left and right swimming movement

SWIMright=1
SWIMleft=2

SWIMdir=1

//length off screen before turning around
SWIMmargin=120


motion_set(90,SWIMvspe)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//determines if the player should be harmed when making contact

if(y&lt;SWIMybase)
HARMplayer=true
else
HARMplayer=false

take_damage=HARMplayer

//creates the path for the body segments to follow
path_add_point(MYpath,x,y,0)
path_delete_point(MYpath,path_get_number(MYpath)-LENmax)
    

//segs follow path/head

var SLICE=LENmax/SEGS;

var i=0;

//this is done in reverse
repeat(SEGS){
    BOD[i].x=path_get_point_x(MYpath,(i+1)*SLICE)
    BOD[i].y=path_get_point_y(MYpath,(i+1)*SLICE)
    i+=1
    
}


//head movement


//up
if(SWIMstate=SWIMup){

    motion_add(270,SWIMvgrav)
    
    if(y&gt;SWIMybase){
        SWIMstate=SWIMdown
        
        var i=0;
        var EGGang=random(360);
        var EGGslice=360/EGGshots
        
        
        if(x&lt;view_xview[0]+400)
        if(x&gt;view_xview[0]+20)
        repeat(EGGshots){
        
            var son=instance_create(x,y,catfish_egg);
            son.direction=EGGang+(i*EGGslice)
            i+=1
            }
        
        instance_create(x,y,ripple_drawer)
        
        motion_set(270,SWIMvspe)
    }
    
}


//down
if(SWIMstate=SWIMdown){

    motion_add(90,SWIMvgrav)
    
    if(y&lt;SWIMybase){
    
        instance_create(x,y,ripple_drawer)
    
        SWIMstate=SWIMup
        motion_set(90,SWIMvspe)
        
        
        
        
    }
    
}

    
///when fish head is off screen


//right off screen
if(SWIMdir=SWIMright){


if(x&gt;view_xview[0]+400+SWIMmargin){

    SWIMdir=SWIMleft
    x-=1
    
    LAPS+=1
    
    if(LAPS=LAPmax){
        with(catfish_surface)
            alarm[0]=2
        with(catfish_seg)
            instance_destroy()
        with(catfish_egg)
            instance_destroy()
        instance_destroy()
        
    }
    
    SWIMybase=view_yview[0]+60+random(120)
    y=SWIMybase
    
    }
    
    x+=SWIMhspe
    
    
    
    
}


//off scren left
if(SWIMdir=SWIMleft){


if(x&lt;view_xview[0]-SWIMmargin){
    SWIMdir=SWIMright
    x+=1
    
    LAPS+=1
    
    SWIMybase=view_yview[0]+60+random(120)
    y=SWIMybase
    
    
    }
    
    x-=SWIMhspe
    
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_actor_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(HARMplayer=false)
exit
enemy_hit()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///storing draw code

image_angle=point_direction(x,y,xprevious,yprevious)-180

if(SWIMdir=SWIMright)
image_yscale=1
else
image_yscale=-1


draw_text(x,y+40,LAPS)

//draw_text(view_xview[0]+20,view_yview[0]+20,life)

//draw_path(MYpath,view_xview[0],view_yview[0],true)





//draw_set_color(c_blue)
//draw_line(view_xview[0],view_yview[0]+SWIMybase,view_xview[0]+400,view_yview[0]+SWIMybase)

//draw_set_color(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
