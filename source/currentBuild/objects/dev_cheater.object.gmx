<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.BUILDversion = "v0.12";

debug = false;
debugMode = 0; // 0=detail; 1=simple; 2=extra;
event_user(0);

surf_graph = -1;
graph_w = 120;
graph_h = 40;
graph_ind = 0;
fps_num = 60;
fps_ind = 0;
for(var i=fps_num-1; i&gt;=0; i--;)
    fps_avg[i] = 0;
avg_fps = 0;
max_fps = 1;

resourceMode = 0;
room_scroll = 0;
object_scroll = 0;
object_select = -1;

object = -1;
objects = 0;
var index = 0;
while(object_exists(index))
    {
    // ignore parent objects
    //if (string_copy(object_get_name(index),1,4) != "par_")
        object[objects++] = index;
    index++;
    }
log("["+string(objects)+"] Objects Indexed");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//JB CODE
if(gamepad_check(0,gpinput.trigr)=true){
    global.yshake=6
}
if(gamepad_check(0,gpinput.trigl)=true){
    with(muslim_boat)
        instance_create(x+40+random(40),y+140,muslim_spin)
    }
///END JB CODE

// smooth fps stats
if (fps_real &gt; max_fps)
    max_fps = fps_real;
fps_avg[fps_ind] = fps_real;
avg_fps += fps_avg[fps_ind];
fps_ind++;
if (fps_ind &gt;= fps_num)
    fps_ind = 0;
avg_fps -= fps_avg[fps_ind];

// toggle debug mode
if (keyboard_check_pressed(vk_f1))
    {
    debugMode++;
    if (debugMode &gt; 3)
        debugMode = -1;
    debug = (debugMode &gt; -1);
    if (!debug)
        {
        with(par_actor)
            take_damage = true;
        }
    }

// don't hurt player in debug mode
if (debug)
    {
    with(par_actor)
        take_damage = false;
    }

// next room
if (keyboard_check_pressed(vk_pageup))
    {
    if (room_exists(room_next(room)))
        {
        room_goto(room_next(room));
        mus_stop();
        }
    }
// previous room
if (keyboard_check_pressed(vk_pagedown))
    {
    if (room_exists(room_previous(room))) and (room != menu_room)
        {
        room_goto(room_previous(room));
        mus_stop();
        }
    }

// resource scroll
if (debugMode == 3)
    {
    var vx = view_xview[0];
    var vy = view_yview[0];
    if (resourceMode == 1)
        {
        if (mouse_check_button_pressed(mb_left))
        and (!point_in_rectangle(mouse_x,mouse_y,vx+6,vy+6,vx+262,vy+6+9*12))
            {
            if (object_exists(object_select))
                instance_create(mouse_x,mouse_y,object_select);
            }
        }
    if (mouse_wheel_up())
        {
        if (resourceMode == 0)
            {
            if (room_scroll &gt; 0)
                {
                room_scroll -= 2+(3*keyboard_check(vk_shift));
                room_scroll = max(0,room_scroll);
                }
            }
        else if (resourceMode == 1)
            {
            if (object_scroll &gt; 0)
                {
                object_scroll -= 2+(18*keyboard_check(vk_shift));
                object_scroll = max(0,object_scroll);
                }
                
            }
        }
    if (mouse_wheel_down())
        {
        if (resourceMode == 0)
            {
            if (room_scroll &lt; room_last-7)
                {
                room_scroll += 2+(3*keyboard_check(vk_shift));
                room_scroll = min(room_last-7,room_scroll);
                }
            }
        else if (resourceMode == 1)
            {
            if (object_scroll &lt; objects-7)
                {
                object_scroll += 2+(18*keyboard_check(vk_shift));
                object_scroll = min(objects-7,object_scroll);
                }
                
            }
        }
    }

// restart
if (keyboard_check_pressed(ord("R")))
    {
    mus_stop();
    with(obj_shader)
        instance_destroy();
    instance_destroy();
    game_restart()
    }

// end
if (keyboard_check_pressed(vk_escape))
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// output OS info for debugging
var file = file_text_open_write(working_directory+"debug.txt");

file_text_write_string(file,"[OS]");
file_text_writeln(file);
file_text_write_string(file,string(val_to_text(4,os_type)));
file_text_writeln(file);
file_text_write_string(file,"[VERSION]");
file_text_writeln(file);
file_text_write_string(file,string(os_version));
file_text_writeln(file);

var info_map = os_get_info();
if (info_map &gt; -1)
    {
    var key = ds_map_find_first(info_map);
    while(key != undefined)
        {
        file_text_write_string(file,"["+string_upper(string(key))+"]");
        file_text_writeln(file);
        file_text_write_string(file,string_upper(string(info_map[?key])));
        file_text_writeln(file);
        
        key = ds_map_find_next(info_map,key);
        }
    }

file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug)
    {
    var vx = view_xview[0];
    var vy = view_yview[0];
    
    // smooth fps graph
    if (surface_exists(surf_graph))
        surface_set_target(surf_graph);
    else
        {
        surf_graph = surface_create(graph_w,graph_h);
        surface_set_target(surf_graph);
        draw_clear($000000);
        }
    
    // fade to black
    if (graph_ind &amp; 7 == 4)
        {
        draw_set_color($000000);
        draw_set_alpha(1/8);
        draw_rectangle(0,0,graph_w,graph_h,0);
        draw_set_alpha(1);
        }
    
    // draw current graph line
    draw_set_color($FFFFFF);
    draw_line(graph_ind,graph_h,graph_ind,graph_h-(max(0,1500-fps_avg[graph_ind mod 60])/3000)*graph_h);
    graph_ind++;
    if (graph_ind &gt; graph_w)
        graph_ind = 0;
    
    surface_reset_target();
    
    switch(debugMode)
        {
        case 0: // hitboxes
            draw_set_color(c_blue);
            with(par_actor)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_red);
            with(par_enemy)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_orange);
            with(par_projectile)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_fuchsia);
            with(par_solid)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            with(par_jt)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            with(par_mb)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_yellow);
            with(par_trigger)
                {
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
                if (active)
                    {
                    draw_set_alpha(0.5);
                    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,0);
                    draw_set_alpha(1.0);
                    }
                }
            //draw_set_color(c_lime);
            //with(par_verlet)
            //    draw_point(x,y);
            break;
        
        case 1: // simple
            draw_set_color($000000);
            draw_rectangle(vx+400-(graph_w+4+1),vy+4-1,vx+400-4,vy+4+graph_h,0);
            draw_surface(surf_graph,vx+400-(graph_w+4),vy+4);
            draw_set_halign(0);
            draw_set_valign(0);
            draw_text_outline((vx+400)-(graph_w+4),vy+4+graph_h+4,"FPS: "+string(round(avg_fps/fps_num)));
            break;
            
        case 2: // detailed
            var inst_num = 0;
            inst_num += instance_number(par_solid);
            inst_num += instance_number(par_jt);
            inst_num += instance_number(par_mb);
            inst_num += instance_number(par_actor);
            inst_num += instance_number(par_enemy);
            inst_num += instance_number(par_shootable);
            
            var proj_num = 0;
            proj_num += instance_number(par_projectile);
            
            var part_num = 0;
            part_num += instance_number(par_effect);
            
            draw_set_halign(0);
            draw_set_valign(0);
            draw_text_outline(vx+4,vy+4+00,"Version: BUILD["+string(global.BUILDversion)+"] CFG["+string(global.CFGversion)+"]");
            draw_text_outline(vx+4,vy+4+12,"Instances: "+string(inst_num));
            draw_text_outline(vx+4,vy+4+24,"Projectiles: "+string(proj_num));
            draw_text_outline(vx+4,vy+4+36,"Particles: "+string(part_num));            draw_set_color($000000);
            draw_rectangle(vx+400-(graph_w+4+1),vy+4-1,vx+400-4,vy+4+graph_h,0);
            draw_surface(surf_graph,(vx+400)-(graph_w+4),vy+4);
            draw_text_outline((vx+400)-(graph_w+4),vy+4+graph_h+4,"FPS: "+string(round(avg_fps/fps_num)));
            
            // draw connected gamepads
            if (global.CFG[config.padType])
                var spr = spr_buttons_xbox;
            else
                var spr = spr_buttons_ps;
            for(var i=0; i&lt;global.gpcount; i++;)
                draw_sprite(spr,24,vx+4 + i*44,vy+216);
            break;
        
        case 3: // resource select
            draw_set_color($000000);
            draw_set_alpha(0.75);
            draw_rectangle(vx+6,vy+6,vx+262,vy+6+9*12,0);
            draw_set_alpha(1.00);
            
            var dx = 0;
            var dy = 0;
            
            var str = "ROOMS";
            var sw = string_width(str);
            var sh = string_height(str);
            if (resourceMode == 0) // room select
                {
                draw_set_color($FFFFFF);
                draw_set_alpha(0.75);
                draw_rectangle(vx+10+dx,vy+8,vx+14+dx+sw,vy+8+sh,0);
                draw_set_alpha(1.00);
                }
            if (point_in_rectangle(mouse_x,mouse_y,vx+10+dx,vy+8,vx+14+dx+sw,vy+8+sh))
                {
                draw_text_outline(vx+12+dx,vy+6,str);
                if (mouse_check_button_pressed(mb_left))
                    resourceMode = 0;
                }
            else
                {
                if (resourceMode == 0)
                    draw_set_color($000000);
                else
                    draw_set_color($CCCCCC);
                
                draw_text(vx+12+dx,vy+6,str);
                }
            dx += sw+24;
            
            var str = "OBJECTS";
            var sw = string_width(str);
            var sh = string_height(str);
            if (resourceMode == 1) // object select
                {
                draw_set_color($FFFFFF);
                draw_set_alpha(0.75);
                draw_rectangle(vx+10+dx,vy+8,vx+14+dx+sw,vy+8+sh,0);
                draw_set_alpha(1.00);
                }
            if (point_in_rectangle(mouse_x,mouse_y,vx+10+dx,vy+8,vx+14+dx+sw,vy+8+sh))
                {
                draw_text_outline(vx+12+dx,vy+6,str);
                if (mouse_check_button_pressed(mb_left))
                    resourceMode = 1;
                }
            else
                {
                if (resourceMode == 1)
                    draw_set_color($000000);
                else
                    draw_set_color($CCCCCC);
                
                draw_text(vx+12+dx,vy+6,str);
                }
            dx += sw+24;
            
            if (resourceMode == 0)
                {
                for(var i=room_first+1+room_scroll; i&lt;=min(room_first+room_scroll+7,room_last); i++;)
                    {
                    if (i == room)
                        {
                        draw_set_color($FFFFFF);
                        draw_set_alpha(0.75);
                        draw_rectangle(vx+6,vy+25+dy*12,vx+262,vy+36+dy*12,0);
                        draw_set_alpha(1.00);
                        }
                    
                    if (point_in_rectangle(mouse_x,mouse_y,vx+6,vy+25+dy*12,vx+262,vy+36+dy*12))
                        {
                        draw_text_outline(vx+12,vy+24+dy*12,room_get_name(i));
                        if (mouse_check_button_pressed(mb_left))
                            room_goto(i);
                        }
                    else
                        {
                        if (i == room)
                            draw_set_color($000000);
                        else
                            draw_set_color($CCCCCC);
                        
                        draw_text(vx+12,vy+24+dy*12,room_get_name(i));
                        }
                    dy++;
                    }
                }
            else if (resourceMode == 1)
                {
                for(var i=object_scroll; i&lt;min(object_scroll+7,objects); i++;)
                    {
                    if (i == object_select)
                        {
                        draw_set_color($FFFFFF);
                        draw_set_alpha(0.75);
                        draw_rectangle(vx+6,vy+25+dy*12,vx+262,vy+36+dy*12,0);
                        draw_set_alpha(1.00);
                        }
                    
                    if (point_in_rectangle(mouse_x,mouse_y,vx+6,vy+25+dy*12,vx+262,vy+36+dy*12))
                        {
                        draw_text_outline(vx+12,vy+24+dy*12,object_get_name(i));
                        if (mouse_check_button_pressed(mb_left))
                            object_select = i;
                        }
                    else
                        {
                        if (i == object_select)
                            draw_set_color($000000);
                        else
                            draw_set_color($CCCCCC);
                        
                        draw_text(vx+12,vy+24+dy*12,object_get_name(i));
                        }
                    dy++;
                    }
                }
            break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
